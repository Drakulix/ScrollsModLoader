<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFu.IoC</name>
    </assembly>
    <members>
        <member name="T:LinFu.IoC.CompositePostProcessor">
            <summary>
            Represents an <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> type that processes multiple <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> instances at once.
            </summary>
        </member>
        <member name="M:LinFu.IoC.CompositePostProcessor.#ctor(System.Collections.Generic.IEnumerable{LinFu.IoC.Interfaces.IPostProcessor})">
            <summary>
            Initializes the type using the given <paramref name="postProcessors" />.
            </summary>
            <param name="postProcessors">The list of <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> instances that will be handled by this type.</param>
        </member>
        <member name="M:LinFu.IoC.CompositePostProcessor.PostProcess(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            A method that passes every request result made
            to the list of postprocessors.
            </summary>
            <param name="result">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> instance that describes the result of the service request.</param>
            <returns>A <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> representing the results returned as a result of the postprocessors.</returns>
        </member>
        <member name="T:LinFu.IoC.CompositePreProcessor">
            <summary>
            Represents an <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> type that processes multiple <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> instances at once.
            </summary>
        </member>
        <member name="M:LinFu.IoC.CompositePreProcessor.#ctor(System.Collections.Generic.IEnumerable{LinFu.IoC.Interfaces.IPreProcessor})">
            <summary>
            Initializes the type using the given <paramref name="preProcessors" />.
            </summary>
            <param name="preProcessors">The list of <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> instances that will be handled by this type.</param>
        </member>
        <member name="M:LinFu.IoC.CompositePreProcessor.Preprocess(LinFu.IoC.Interfaces.IServiceRequest)">
            <summary>
            A method that passes every request result made
            to the list of preprocessors.
            </summary>
            <param name="request">The parameter that describes the context of the service request.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.ContainerActivationContext">
            <summary>
            Represents a class that describes a request to instantiate a particular object type using a given
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ContainerActivationContext.#ctor(System.Type,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Initializes the class with the given parameters.
            </summary>
            <param name="concreteType">The type to be instantiated.</param>
            <param name="container">The container that will be used to instantiate the target type.</param>
            <param name="additionalArguments">The additional arguments that must be passed to the constructor.</param>
        </member>
        <member name="P:LinFu.IoC.Configuration.ContainerActivationContext.Container">
            <summary>
            Gets the value indicating the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance
            that will instantiate the <see cref="P:LinFu.AOP.Interfaces.IActivationContext.TargetType" />.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.DefaultActivator">
            <summary>
            Represents a class that can instantiate object instances.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.DefaultActivator.CreateInstance(LinFu.IoC.Configuration.Interfaces.IContainerActivationContext)">
            <summary>
            Creates an object instance.
            </summary>
            <returns>A valid object instance.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.DefaultActivator.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the class with the default services.
            </summary>
            <param name="container">The target service container.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.InjectAttribute">
            <summary>
            The attribute used to mark a property for autoinjection.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.PostProcessorAttribute">
            <summary>
            Marks a target type as an <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" />
            instance that can be injected into a
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.PreprocessorAttribute">
            <summary>
            Marks a target type as an <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" />
            instance that can be injected into a
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.BaseMethodBuilder`1">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodBuilder`1" /> interface.
            </summary>
            <typeparam name="TMethod">The method type to generate.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.CreateMethod(`0)">
            <summary>
            Creates a method from the <paramref name="existingMethod" />.
            </summary>
            <param name="existingMethod">The method that will be used to define the new method.</param>
            <returns>A method based on the old method.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.PushMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            Pushes the method arguments onto the stack.
            </summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the target method body.</param>
            <param name="targetMethod">The target method that will be invoked.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.GetParameterList(`0,System.Type[])">
            <summary>
            Determines the parameter types of the dynamically generated method.
            </summary>
            <param name="existingMethod">The target method.</param>
            <param name="parameterTypes">The target method argument types.</param>
            <returns>The list of <see cref="T:System.Type" /> objects that describe the signature of the method to generate.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.PushInstance(System.Reflection.Emit.ILGenerator,`0)">
            <summary>
            Pushes the method target onto the stack.
            </summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> that belongs to the method body.</param>
            <param name="method">The current method.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.GetReturnType(`0)">
            <summary>
            Determines the return type from the target <paramref name="method" />.
            </summary>
            <param name="method">The target method itself.</param>
            <returns>The method return type.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodBuilder`1.EmitCall(System.Reflection.Emit.ILGenerator,`0)">
            <summary>
            Emits the instruction to call the target <paramref name="method" /></summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the target method body.</param>
            <param name="method">The method that will be invoked.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.ConstructorInvoke">
            <summary>
            A class that invokes constructor instances.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorInvoke.Invoke(System.Object,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Invokes the <paramref name="targetMethod" /> constructor
            using the given <paramref name="arguments" />.
            </summary>
            <param name="target">The target object instance.</param>
            <param name="targetMethod">The target method to invoke.</param>
            <param name="arguments">The arguments to be used with the method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.ConstructorMethodBuilder">
            <summary>
            A method builder that generates dynamic methods using existing constructors.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorMethodBuilder.GetReturnType(System.Reflection.ConstructorInfo)">
            <summary>
            Returns the declaring type of the target constructor.
            </summary>
            <param name="constructor">
            </param>
            <returns>The declaring type of the target constructor.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorMethodBuilder.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Emits an instruction that instantiates the type associated with the
            <paramref name="constructor" />.
            </summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the target method body.</param>
            <param name="constructor">The target constructor.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IConstructorArgumentResolver">
            <summary>
            Represents a type that determines the method arguments that should be used for a given constructor.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IConstructorArgumentResolver.GetConstructorArguments(System.Reflection.ConstructorInfo,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Determines the parameter values that should be used for a given constructor.
            </summary>
            <param name="constructor">The target constructor.</param>
            <param name="container">The host container instance.</param>
            <param name="additionalArguments">The list of additional arguments that should be combined with the arguments from the container.</param>
            <returns>A list of arguments that will be used for the given constructor.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.INamedType">
            <summary>
            Represents a named type.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.INamedType.Name">
            <summary>
            Gets or sets a value indicating the name that will be associated with the current type.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.INamedType.Type">
            <summary>
            Gets or sets the value indicating the current target type.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.NamedType">
            <summary>
            Represents a named type.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.NamedType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.IoC.Configuration.NamedType" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.NamedType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.IoC.Configuration.NamedType" /> class.
            </summary>
            <param name="currentType">The current type.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.NamedType.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.IoC.Configuration.NamedType" /> class.
            </summary>
            <param name="parameter">The target parameter.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.NamedType.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.IoC.Configuration.NamedType" /> class.
            </summary>
            <param name="property">The target property.</param>
        </member>
        <member name="P:LinFu.IoC.Configuration.NamedType.Name">
            <summary>
            Gets or sets a value indicating the name that will be associated with the current type.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.NamedType.Type">
            <summary>
            Gets or sets the value indicating the current target type.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Resolvers.ConstructorArgumentResolver">
            <summary>
            Represents a class that determines the method arguments that should be used for a given constructor.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.ConstructorArgumentResolver.GetConstructorArguments(System.Reflection.ConstructorInfo,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Determines the parameter values that should be used for a given constructor.
            </summary>
            <param name="constructor">The target constructor.</param>
            <param name="container">The host container instance.</param>
            <param name="additionalArguments">The list of additional arguments that should be combined with the arguments from the container.</param>
            <returns>A list of arguments that will be used for the given constructor.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.ConstructorArgumentResolver.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the class with the default services.
            </summary>
            <param name="container">The target service container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.ConstructorArgumentResolver.GetMissingParameterTypes(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Determines which parameter types need to be supplied to invoke a particular
            <paramref name="constructor" />  instance.
            </summary>
            <param name="constructor">The target constructor.</param>
            <param name="additionalArguments">The additional arguments that will be used to invoke the constructor.</param>
            <returns>The list of parameter types that are still missing parameter values.</returns>
        </member>
        <member name="T:LinFu.IoC.ContainerExtensions">
            <summary>
            A class that adds generics support to existing
            <see cref="T:LinFu.IoC.Interfaces.IContainer" /> and <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            instances.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFrom(LinFu.IoC.Interfaces.IServiceContainer,LinFu.Reflection.IAssemblyLoader,System.String,System.String,LinFu.Reflection.ILoader{LinFu.IoC.Interfaces.IServiceContainer})">
            <summary>
            Loads a set of <paramref name="searchPattern">files</paramref> from the <paramref name="directory">target directory</paramref>
            using a custom <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance.
            </summary>
            <param name="container">The container to be loaded.</param>
            <param name="assemblyLoader">The custom <see cref="T:LinFu.Reflection.IAssemblyLoader" /> that will be used to load the target assemblies from disk.</param>
            <param name="directory">The target directory.</param>
            <param name="searchPattern">The search pattern that describes the list of files to be loaded.</param>
            <param name="customLoader">The custom loader that will be used to load the container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFrom(LinFu.IoC.Interfaces.IServiceContainer,LinFu.Reflection.IAssemblyLoader,System.String,System.String)">
            <summary>
            Loads a set of <paramref name="searchPattern">files</paramref> from the <paramref name="directory">target directory</paramref>
            using a custom <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance.
            </summary>
            <param name="container">The container to be loaded.</param>
            <param name="assemblyLoader">The custom <see cref="T:LinFu.Reflection.IAssemblyLoader" /> that will be used to load the target assemblies from disk.</param>
            <param name="directory">The target directory.</param>
            <param name="searchPattern">The search pattern that describes the list of files to be loaded.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFrom(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.String,LinFu.Reflection.ILoader{LinFu.IoC.Interfaces.IServiceContainer})">
            <summary>
            Loads a set of <paramref name="searchPattern">files</paramref> from the <paramref name="directory">target directory</paramref>.
            </summary>
            <param name="container">The container to be loaded.</param>
            <param name="directory">The target directory.</param>
            <param name="searchPattern">The search pattern that describes the list of files to be loaded.</param>
            <param name="customLoader">The custom loader that will be used to load the container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFrom(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.String)">
            <summary>
            Loads a set of <paramref name="searchPattern">files</paramref> from the <paramref name="directory">target directory</paramref>.
            </summary>
            <param name="container">The container to be loaded.</param>
            <param name="directory">The target directory.</param>
            <param name="searchPattern">The search pattern that describes the list of files to be loaded.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFromBaseDirectory(LinFu.IoC.Interfaces.IServiceContainer,System.String)">
            <summary>
            Loads a set of <paramref name="searchPattern">files</paramref> from the application base directory.
            </summary>
            <param name="container">The container to be loaded.</param>
            <param name="searchPattern">The search pattern that describes the list of files to be loaded.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AutoCreateFrom(System.Type,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Automatically instantiates a <paramref name="concreteType" />
            with the constructor with the most resolvable parameters from
            the given <paramref name="container" /> instance.
            </summary>
            <remarks>
            This method only performs constructor injection on the target type. If you need any other form of injection (such as property injection), you'll need to
            register your type and instantiate it with the <see cref="M:LinFu.IoC.ContainerExtensions.GetService``1(LinFu.IoC.Interfaces.IServiceContainer,System.Object[])" /> method.
            </remarks>
            <param name="container">The service container that contains the arguments that will automatically be injected into the constructor.</param>
            <param name="concreteType">The type to instantiate.</param>
            <param name="additionalArguments">The list of arguments to pass to the target type.</param>
            <returns>A valid, non-null object reference.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AutoLoadFrom(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.String)">
            <summary>
            Automatically loads assemblies from the given <paramref name="directory" /> whenever an assembly
            matching the given <paramref name="fileSpec" /> is dropped into the given directory.
            </summary>
            <param name="container">The service container that will automatically be configured whenever a file change is detected.</param>
            <param name="directory">The target directory.</param>
            <param name="fileSpec">The assembly file pattern.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.LoadFrom(LinFu.IoC.Interfaces.IServiceContainer,System.Reflection.Assembly)">
            <summary>
            Loads an existing <paramref name="assembly" /> into the container.
            </summary>
            <param name="container">The target container to be configured.</param>
            <param name="assembly">The assembly to be loaded.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.CreateDefaultContainerLoader(LinFu.Reflection.ILoader{LinFu.IoC.Interfaces.IServiceContainer})">
            <summary>
            Generates the default <see cref="T:LinFu.IoC.Configuration.AssemblyContainerLoader" /> for a <see cref="T:LinFu.IoC.Configuration.Loader" /> class instance.
            </summary>
            <param name="loader">The loader that will load the target container.</param>
            <returns>A valid <see cref="T:LinFu.IoC.Configuration.AssemblyContainerLoader" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.SetCustomPropertyInjectionAttribute(LinFu.IoC.Interfaces.IServiceContainer,System.Type)">
            <summary>
            Sets the custom attribute type that will be used to mark properties
            for automatic injection.
            </summary>
            <param name="container">The target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</param>
            <param name="attributeType">The custom property attribute that will be used to mark properties for injection.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.SetCustomMethodInjectionAttribute(LinFu.IoC.Interfaces.IServiceContainer,System.Type)">
            <summary>
            Sets the custom attribute type that will be used to mark methods
            for automatic injection.
            </summary>
            <param name="container">The target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</param>
            <param name="attributeType">The custom property attribute that will be used to mark method for injection.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.SetCustomFieldInjectionAttribute(LinFu.IoC.Interfaces.IServiceContainer,System.Type)">
            <summary>
            Sets the custom attribute type that will be used to mark fields
            for automatic injection.
            </summary>
            <param name="container">The target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</param>
            <param name="attributeType">The custom property attribute that will be used to mark fields for injection.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            with the default services.
            </summary>
            <param name="container">
            </param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AutoCreate(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Object[])">
            <summary>
            Automatically instantiates a <paramref name="concreteType" />
            with the constructor with the most resolvable parameters from
            the given <paramref name="container" /> instance.
            </summary>
            <param name="container">The service container that contains the arguments that will automatically be injected into the constructor.</param>
            <param name="concreteType">The type to instantiate.</param>
            <param name="additionalArguments">The list of arguments to pass to the target type.</param>
            <returns>A valid, non-null object reference.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AutoCreate``1(LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Automatically instantiates a <typeparamref name="T" /> type
            with the constructor with the most resolvable parameters from
            the given <paramref name="container" /> instance.
            </summary>
            <typeparam name="T">The type to instantiate.</typeparam>
            <param name="container">The service container that contains the arguments that will automatically be injected into the constructor.</param>
            <param name="additionalArguments">The list of arguments to pass to the target type's constructors.</param>
            <returns>A valid, non-null object reference.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.PostProcess(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Object,System.Object[])">
            <summary>
            Postprocesses an object instance as if it were created from the target <paramref name="container" />.
            </summary>
            <param name="container">The container that will postprocess the target <paramref name="instance" />.</param>
            <param name="concreteType">The type being processed.</param>
            <param name="instance">The target instance to be processed.</param>
            <param name="additionalArguments">The list of arguments to pass to the target type.</param>
            <returns>A valid, non-null object reference.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AutoCreateInternal(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Object[])">
            <summary>
            Automatically instantiates a <paramref name="concreteType" />
            with the constructor with the most resolvable parameters from
            the given <paramref name="container" /> instance.
            </summary>
            <remarks>
            This method only performs constructor injection on the target type. If you need any other form of injection (such as property injection), you'll need to
            register your type and instantiate it with the <see cref="M:LinFu.IoC.ContainerExtensions.GetService``1(LinFu.IoC.Interfaces.IServiceContainer,System.Object[])" /> method.
            </remarks>
            <param name="container">The service container that contains the arguments that will automatically be injected into the constructor.</param>
            <param name="concreteType">The type to instantiate.</param>
            <param name="additionalArguments">The list of arguments to pass to the target type.</param>
            <returns>A valid, non-null object reference.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddDefaultServices(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the container with the minimum required services.
            </summary>
            <param name="container">The target service container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.GetService``1(LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Creates an instance of <typeparamref name="T" />
            using the given <paramref name="container" />.
            </summary>
            <typeparam name="T">The service type to create.</typeparam>
            <param name="container">The container that will instantiate the service.</param>
            <param name="additionalArguments">The additional arguments that will be used to construct the service type.</param>
            <returns>If successful, it will return a service instance that is compatible with the given type;
            otherwise, it will just return a <c>null</c> value.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.GetService(LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Interfaces.IServiceInfo,System.Object[])">
            <summary>
            Instantiates a service that matches the <paramref name="info">service description</paramref>.
            </summary>
            <param name="container">The container that will instantiate the service.</param>
            <param name="info">The description of the requested service.</param>
            <param name="additionalArguments">The additional arguments that will be used to construct the service type.</param>
            <returns>If successful, it will return a service instance that is compatible with the given type;
            otherwise, it will just return a <c>null</c> value.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.GetService``1(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Object[])">
            <summary>
            Creates an instance of <typeparamref name="T" />
            using the given <paramref name="container" />.
            </summary>
            <typeparam name="T">The service type to create.</typeparam>
            <param name="container">The container that will instantiate the service.</param>
            <param name="serviceName">The name of the service to instantiate.</param>
            <param name="additionalArguments">The additional arguments that will be used to construct the service type.</param>
            <returns>If successful, it will return a service instance that is compatible with the given type;
            otherwise, it will just return a <c>null</c> value.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Type)">
            <summary>
            Configures the container to instantiate the <paramref name="implementingType" />
            on every request for the <paramref name="serviceType" />.
            </summary>
            <param name="container">The container that will hold the service type.</param>
            <param name="serviceType">The type of service being implemented.</param>
            <param name="implementingType">The concrete type that will implement the service type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Registers the <paramref name="serviceTypeToRegisterAsSelf">service type</paramref>
            as both the implementing type and the service type using the given <paramref name="lifecycle" />.
            </summary>
            <param name="container">The container that will hold the service type.</param>
            <param name="serviceTypeToRegisterAsSelf">The service type that will be registered as both the service type and the implementing type.</param>
            <param name="lifecycle">The service <see cref="T:LinFu.IoC.Configuration.LifecycleType" />.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.Type)">
            <summary>
            Registers the <paramref name="serviceTypeToRegisterAsSelf">service type</paramref>
            as both the implementing type and the service type.
            </summary>
            <param name="container">The container that will hold the service type.</param>
            <param name="serviceTypeToRegisterAsSelf">The service type that will be registered as both the service type and the implementing type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Configures the container to instantiate the <paramref name="implementingType" />
            on every request for the <paramref name="serviceType" />.
            </summary>
            <param name="container">The container that will hold the service type.</param>
            <param name="serviceType">The type of service being implemented.</param>
            <param name="implementingType">The concrete type that will implement the service type.</param>
            <param name="lifecycle">The service <see cref="T:LinFu.IoC.Configuration.LifecycleType" />.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type,System.Object)">
            <summary>
            Registers an existing service instance with the container using the given
            <paramref name="serviceName" /> and <paramref name="serviceType" />.
            </summary>
            <param name="container">The target container instance.</param>
            <param name="serviceName">The service name that will be associated with the service instance.</param>
            <param name="serviceType">The target service type.</param>
            <param name="serviceInstance">The actual service instance that will represent the service type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.Type,System.Object)">
            <summary>
            Registers an existing service instance with the container using the given
            <paramref name="serviceType" />.
            </summary>
            <param name="container">The target container instance.</param>
            <param name="serviceType">The target service type.</param>
            <param name="serviceInstance">The actual service instance that will represent the service type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Configures the container to instantiate the <paramref name="implementingType" />
            on every request for the <paramref name="serviceType" />.
            </summary>
            <param name="serviceName">The name of the service to associate with the given <paramref name="serviceType" />.</param>
            <param name="container">The container that will hold the service type.</param>
            <param name="serviceType">The type of service being implemented.</param>
            <param name="implementingType">The concrete type that will implement the service type.</param>
            <param name="lifecycle">The service <see cref="T:LinFu.IoC.Configuration.LifecycleType" />.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddFactory``1(LinFu.IoC.Interfaces.IServiceContainer,System.String,LinFu.IoC.Interfaces.IFactory{``0})">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it
            with the given <typeparamref name="T">service type</typeparamref> and
            <paramref name="serviceName">service name</paramref>.
            </summary>
            <param name="serviceName">The name of the service to associate with the given <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</param>
            <param name="container">The container that will hold the factory instance.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddFactory``1(LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Interfaces.IFactory{``0})">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it
            with the given <typeparamref name="T">service type</typeparamref>.
            </summary>
            <param name="container">The container that will hold the factory instance.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddFactory(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it with the given
            <paramref name="serviceName" /> and <paramref name="serviceType" /></summary>
            <param name="container">The target container.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">The service type.</param>
            <param name="factory">The factory instance that will be responsible for creating the service itself.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddFactory(LinFu.IoC.Interfaces.IServiceContainer,System.Type,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it with the given
            <paramref name="serviceType" /></summary>
            <param name="container">The target container.</param>
            <param name="serviceType">The service type.</param>
            <param name="factory">The factory instance that will be responsible for creating the service itself.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddDefaultFactory(LinFu.IoC.Interfaces.IServiceContainer,System.Type,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Registers the <paramref name="factory" /> as the default factory instance
            that will be used if no other factory can be found for the current <paramref name="serviceType" />.
            </summary>
            <param name="container">The host container.</param>
            <param name="serviceType">The service type that will be created by the default factory.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used if no other factories can create the given service type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``1(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{``0})">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <typeparam name="TResult">The service type itself.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``2(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{``0,``1})">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <typeparam name="TResult">The service type itself.</typeparam>
            <typeparam name="T1">The first parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type,System.MulticastDelegate)">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
            <param name="serviceType">The service type that will be implemented.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``3(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{``0,``1,``2})">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <typeparam name="TResult">The service type itself.</typeparam>
            <typeparam name="T1">The first parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T2">The second parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``5(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <typeparam name="TResult">The service type itself.</typeparam>
            <typeparam name="T1">The first parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T2">The second parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T3">The third parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T4">The third parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``4(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" />
            to instantiate the service instance.
            </summary>
            <typeparam name="TResult">The service type itself.</typeparam>
            <typeparam name="T1">The first parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T2">The second parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <typeparam name="T3">The third parameter type of the <paramref name="factoryMethod" />.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``1(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Func{LinFu.IoC.Interfaces.IFactoryRequest,``0},LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" /> and <paramref name="lifecycleType" />
            to instantiate the service instance.
            </summary>
            <typeparam name="T">The service type itself.</typeparam>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
            <param name="lifecycleType">The service <see cref="T:LinFu.IoC.Configuration.LifecycleType" /> type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``1(LinFu.IoC.Interfaces.IServiceContainer,System.Func{LinFu.IoC.Interfaces.IFactoryRequest,``0},LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Adds a service to the container by using the given <paramref name="factoryMethod" /> and <paramref name="lifecycleType" />
            to instantiate the service instance.
            </summary>
            <typeparam name="T">The service type itself.</typeparam>
            <param name="container">The host container that will instantiate the service type.</param>
            <param name="factoryMethod">The factory method that will be used to create the actual service instance.</param>
            <param name="lifecycleType">The service <see cref="T:LinFu.IoC.Configuration.LifecycleType" /> type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``1(LinFu.IoC.Interfaces.IServiceContainer,``0)">
            <summary>
            Adds an existing service instance to the container.
            </summary>
            <typeparam name="T">The type of service being added.</typeparam>
            <param name="container">The container that will hold the service instance.</param>
            <param name="instance">The service instance itself.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.AddService``1(LinFu.IoC.Interfaces.IServiceContainer,System.String,``0)">
            <summary>
            Adds an existing service instance to the container and
            associates it with the <paramref name="serviceName" />.
            </summary>
            <typeparam name="T">The type of service being added.</typeparam>
            <param name="container">The container that will hold the service instance.</param>
            <param name="serviceName">The name that will be associated with the service instance.</param>
            <param name="instance">The service instance itself.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.GetServices``1(LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Returns all the services in the container that match the given
            <typeparamref name="T">service type</typeparamref>.
            </summary>
            <typeparam name="T">The type of service to return.</typeparam>
            <param name="container">The target container.</param>
            <param name="additionalArguments">The additional arguments that will be used to construct the service type.</param>
            <returns>The list of services that implement the given service type.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.GetServices(LinFu.IoC.Interfaces.IServiceContainer,System.Func{LinFu.IoC.Interfaces.IServiceInfo,System.Boolean},System.Object[])">
            <summary>
            Returns a list of services that match the given <paramref name="condition" />.
            </summary>
            <param name="condition">The predicate that determines which services should be returned.</param>
            <returns>A list of <see cref="T:LinFu.IoC.Interfaces.IServiceInstance" /> objects that describe the services returned as well as provide a reference to the resulting services themselves.</returns>
            <param name="container">the target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</param>
            <param name="additionalArguments">The additional arguments that will be used to construct the service type.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.Contains(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type,System.Object[])">
            <summary>
            Determines whether or not the container can instantiate the given <paramref name="serviceName" />
            and <paramref name="serviceType" /> using the given <paramref name="sampleArguments" />.
            </summary>
            <param name="container">The target container.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceType">The requested service type.</param>
            <param name="sampleArguments">The potential arguments for the service type.</param>
            <returns>Returns <c>true</c> if the requested services exist; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.Contains(LinFu.IoC.Interfaces.IServiceContainer,System.Type)">
            <summary>
            Determines whether or not the container contains a service that matches
            the given <paramref name="serviceType" />.
            </summary>
            <param name="container">The target container.</param>
            <param name="serviceType">The requested service type.</param>
            <returns>Returns <c>true</c> if the requested services exist; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.Contains(LinFu.IoC.Interfaces.IServiceContainer,System.String,System.Type)">
            <summary>
            Determines whether or not the container contains a service that matches
            the given <paramref name="serviceType" />.
            </summary>
            <param name="container">The target container.</param>
            <param name="serviceName">The requested service name.</param>
            <param name="serviceType">The requested service type.</param>
            <returns>Returns <c>true</c> if the requested services exist; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.Contains(LinFu.IoC.Interfaces.IServiceContainer,System.Func{LinFu.IoC.Interfaces.IServiceInfo,System.Boolean})">
            <summary>
            Determines whether or not a container contains services that match
            the given <paramref name="condition" />.
            </summary>
            <param name="container">The target container.</param>
            <param name="condition">The predicate that will be used to determine whether or not the requested services exist.</param>
            <returns>Returns <c>true</c> if the requested services exist; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.DisableAutoPropertyInjection(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Disables automatic property injection for the <paramref name="container" />.
            </summary>
            <param name="container">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.DisableAutoMethodInjection(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Disables automatic method injection for the <paramref name="container" />.
            </summary>
            <param name="container">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.DisableAutoFieldInjection(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Disables automatic field injection for the <paramref name="container" />.
            </summary>
            <param name="container">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.ContainerExtensions.DisableAutoInjectionFor``1(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Disables automatic dependency injection for members that match the specific
            <typeparamref name="TMember" /> type.
            </summary>
            <typeparam name="TMember">The member injection type to disable.</typeparam>
            <param name="container">The target container.</param>
        </member>
        <member name="T:LinFu.IoC.FluentExtensions">
            <summary>
            A class that adds fluent syntax support to <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            instances.
            </summary>
        </member>
        <member name="M:LinFu.IoC.FluentExtensions.Inject``1(LinFu.IoC.Interfaces.IServiceContainer,System.String)">
            <summary>
            Injects a <typeparamref name="TService" /> type
            into a <paramref name="container" /> using the
            given <paramref name="serviceName" /></summary>
            <typeparam name="TService">The type of service to inject.</typeparam>
            <param name="container">The container that will hold the actual service service instance.</param>
            <param name="serviceName">The name of the service to create.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IUsingLambda`1" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.FluentExtensions.Inject``1(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Injects a <typeparamref name="TService" /> type
            into a <paramref name="container" />.
            </summary>
            <typeparam name="TService">The type of service to inject.</typeparam>
            <param name="container">The container that will hold the actual service service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IUsingLambda`1" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.FluentExtensions.Initialize``1(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes services that match the given <typeparamref name="TService" /> type.
            </summary>
            <typeparam name="TService">The service type to initialize.</typeparam>
            <param name="container">The container that will create the service itself.</param>
            <returns>A <see cref="T:LinFu.IoC.Configuration.Interfaces.IPropertyInjectionLambda`1" /> instance. This cannot be <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.FluentExtensions.Initialize``1(LinFu.IoC.Interfaces.IServiceContainer,System.String)">
            <summary>
            Initializes services that match the given <paramref name="serviceName" /> and <typeparamref name="TService" /> type.
            </summary>
            <typeparam name="TService">The service type to initialize.</typeparam>
            <param name="container">The container that will create the service itself.</param>
            <param name="serviceName">The name of the service to initialize.</param>
            <returns>A <see cref="T:LinFu.IoC.Configuration.Interfaces.IPropertyInjectionLambda`1" /> instance. This cannot be <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.FluentExtensions.CreateAdapter``1(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,``0})">
            <summary>
            Converts a <see cref="T:System.Func`4" />
            lambda into an equivalent <see cref="T:System.Func`4" />
            instance.
            </summary>
            <typeparam name="TService">The type of service to create.</typeparam>
            <param name="func">The lambda function to be converted.</param>
            <returns>The equivalent <see cref="T:System.Func`2" />
            that delegates its calls back to the <paramref name="func" /> lambda function.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.ResolutionExtensions">
            <summary>
            Adds methods that extend LinFu.IoC to support automatic constructor resolution.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.MustExistInContainer(System.Type)">
            <summary>
            Generates a predicate that determines whether or not a specific parameter type
            exists in a container.
            </summary>
            <param name="parameterType">The target <see cref="T:System.Type" />. </param>
            <returns>A a predicate that determines whether or not a specific type
            exists in a container</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.ExistsAsEnumerableSetOfServices(System.Type)">
            <summary>
            Generates a predicate that determines whether or not a specific type is actually
            a list of services that can be created from a given container.
            </summary>
            <param name="parameterType">The target <see cref="T:System.Type" />. </param>
            <returns>A a predicate that determines whether or not a specific type
            exists as a list of services in a container</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.ExistsAsServiceArray(System.Type)">
            <summary>
            Generates a predicate that determines whether or not a specific type is actually
            a list of services that can be created from a given container.
            </summary>
            <param name="parameterType">The target <see cref="T:System.Type" />. </param>
            <returns>A a predicate that determines whether or not a specific type
            exists as a list of services in a container</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.ResolveArgumentsFrom(System.Reflection.MethodBase,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Builds an argument list for the <paramref name="method" />
            using the given <paramref name="container" /> instance.
            </summary>
            <param name="method">The method that will be used to instantiate an object instance.</param>
            <param name="container">The container that will provide the method arguments.</param>
            <returns>An array of objects to be used with the target method.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.ResolveFrom(LinFu.IoC.Configuration.Interfaces.IArgumentResolver,System.Reflection.MethodBase,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Builds an argument list for the target <paramref name="method" /> from
            services embedded inside the <paramref name="container" /> instance.
            </summary>
            <param name="resolver">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> instance that will determine the method arguments.</param>
            <param name="method">The target method.</param>
            <param name="container">The container that will provide the method arguments.</param>
            <param name="additionalArguments">The additional arguments that will be passed to the target method.</param>
            <returns>An array of objects to be used with the target method.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.Cast(System.Collections.IEnumerable,System.Type)">
            <summary>
            Casts an <see cref="T:System.Collections.IEnumerable" /> set of items into an array of
            <paramref name="targetElementType" /> items.
            </summary>
            <param name="items">The items being converted.</param>
            <param name="targetElementType">The element type of the resulting array.</param>
            <returns>An array of items that match the <paramref name="targetElementType" />.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ResolutionExtensions.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Performs a strongly typed cast against an <see cref="T:System.Collections.IEnumerable" /> instance.
            </summary>
            <typeparam name="T">The target element type.</typeparam>
            <param name="items">The list of items being converted.</param>
            <returns>An array of items that match the <typeparamref name="T" /> element type.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.FactoryBuilder">
            <summary>
            The default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IFactoryBuilder" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.#ctor">
            <summary>
            Initializes the list of factory types.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.CreateFactory(System.Type,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Creates a factory instance that can create instaces of the given
            <paramref name="serviceType" />  using the <paramref name="implementingType" />
            as the implementation.
            </summary>
            <param name="serviceType">The service being implemented.</param>
            <param name="implementingType">The actual type that will implement the service.</param>
            <param name="lifecycle">The <see cref="T:LinFu.IoC.Configuration.LifecycleType" /> that determines the lifetime of each instance being created.</param>
            <returns>A valid <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.CreateFactory(System.Type,System.Type,System.Type)">
            <summary>
            Creates a factory instance that can create instaces of the given
            <paramref name="serviceType" />  using the <paramref name="actualType" />
            as the implementation.
            </summary>
            <param name="serviceType">The service being implemented.</param>
            <param name="actualType">The actual type that will implement the service.</param>
            <param name="factoryType">The factory type that will instantiate the target service.</param>
            <returns>A valid <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.GetActualType(System.Type,System.Type)">
            <summary>
            Determines the implementing concrete type from the given <paramref name="serviceType" />.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="implementingType">The concrete class that will implement the service type.</param>
            <returns>The actual implementing type.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.CreateFactoryMethod(System.Type,System.Type)">
            <summary>
            A <c>private</c> method that creates the factory method delegate
            for use with a particular factory class.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.SingletonFactory`1" />
            <seealso cref="T:LinFu.IoC.Factories.OncePerRequestFactory`1" />
            <seealso cref="T:LinFu.IoC.Factories.OncePerThreadFactory`1" />
            <param name="serviceType">The service type being instantiated.</param>
            <param name="implementingType">The type that will provide the implementation for the actual service.</param>
            <returns>A factory method delegate that can create the given service.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryBuilder.CreateFactoryMethodInternal``2">
            <summary>
            A method that generates the actual lambda function that creates
            the new service instance.
            </summary>
            <typeparam name="TService">The service type being instantiated.</typeparam>
            <typeparam name="TImplementation">The type that will provide the implementation for the actual service.</typeparam>
            <returns>A strongly-typed factory method delegate that can create the given service.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.ActionContext`1">
            <summary>
            Represents the <c>internal</c> context class that will be used to
            incrementally build enough information to initialize
            a specific <typeparamref name="TService" /> type once
            that service has been instantiated.
            </summary>
            <typeparam name="TService">The service type to be created.</typeparam>
        </member>
        <member name="P:LinFu.IoC.Configuration.ActionContext`1.Action">
            <summary>
            The action that will be performed on an <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            instance once the fluent command executes.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.ActionPostProcessor`1">
            <summary>
            Represents a postprocessor that will execute
            the action associated with the given <see cref="T:LinFu.IoC.Configuration.ActionContext`1" />
            instance every time the target container returns a
            service with particular service name and service type.
            </summary>
            <typeparam name="TService">
            </typeparam>
        </member>
        <member name="T:LinFu.IoC.Configuration.BaseContext`1">
            <summary>
            Represents a class that provides the most basic information
            for executing a fluent command against a
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
            <typeparam name="TService">
            </typeparam>
        </member>
        <member name="P:LinFu.IoC.Configuration.BaseContext`1.ServiceType">
            <summary>
            The service type to be created.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.BaseContext`1.ServiceName">
            <summary>
            The name of the service to be created.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.BaseContext`1.Container">
            <summary>
            The actual <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            that ultimately will hold the service instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.GenerateFactory`1">
            <summary>
            Represents a fluent class that allows
            users to create specific types of factories.
            </summary>
            <typeparam name="TService">The type of service being created.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.GenerateFactory`1.#ctor(LinFu.IoC.Configuration.InjectionContext{`0})">
            <summary>
            Instantiates the class using the given
            <paramref name="context" />.
            </summary>
            <param name="context">The <see cref="T:LinFu.IoC.Configuration.InjectionContext`1" /> instance
            which will contain the information necessary to build a fluent command.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.GenerateFactory`1.AsSingleton">
            <summary>
            Creates a singleton factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.SingletonFactory`1" />
        </member>
        <member name="M:LinFu.IoC.Configuration.GenerateFactory`1.OncePerThread">
            <summary>
            Creates a once per thread factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.OncePerThreadFactory`1" />
        </member>
        <member name="M:LinFu.IoC.Configuration.GenerateFactory`1.OncePerRequest">
            <summary>
            Creates a once per request factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.OncePerRequestFactory`1" />
        </member>
        <member name="M:LinFu.IoC.Configuration.GenerateFactory`1.AddFactory(System.Func{System.Func{LinFu.IoC.Interfaces.IFactoryRequest,`0},LinFu.IoC.Interfaces.IFactory{`0}})">
            <summary>
            Adds a factory to the container by using the
            <paramref name="createFactory" /> delegate to
            create the actual <see cref="T:LinFu.IoC.Interfaces.IFactory`1" />
            instance.
            </summary>
            <param name="createFactory">The delegate that will create the actual factory instance.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.InjectionContext`1">
            <summary>
            Represents the <c>internal</c> context class that will be used to
            incrementally build enough information to inject a specific
            <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> instance into a container.
            </summary>
            <typeparam name="TService">The service type to be created.</typeparam>
        </member>
        <member name="P:LinFu.IoC.Configuration.InjectionContext`1.FactoryMethod">
            <summary>
            The factory method that will be used to
            instantiate the actual <typeparamref name="TService" />
            instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.PropertyInjectionLambda`1">
            <summary>
            Represents a fluent class that creates
            a method that initializes a <typeparamref name="TService" />
            instance.
            </summary>
            <typeparam name="TService">The service type being instantiated.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertyInjectionLambda`1.#ctor(LinFu.IoC.Configuration.ActionContext{`0})">
            <summary>
            Initializes the class with the <paramref name="context" />.
            </summary>
            <param name="context">The context that will be associated with the target container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertyInjectionLambda`1.With(System.Action{`0})">
            <summary>
            Initializes service instances with the given
            <paramref name="action" />.
            </summary>
            <param name="action">An <see cref="T:System.Action`1" /> delegate that will be used to initialize newly created services.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertyInjectionLambda`1.With(System.Action{LinFu.IoC.Interfaces.IServiceContainer,`0})">
            <summary>
            Uses an action delegate to initialize a given service using
            the given <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> and <typeparamref name="TService" />
            instances.
            </summary>
            <param name="action">An <see cref="T:System.Func`2" /> delegate that will be used to initialize newly created services.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertyInjectionLambda`1.AddPostProcessor(LinFu.IoC.Configuration.ActionContext{`0})">
            <summary>
            Attaches the action associated with the <see cref="T:LinFu.IoC.Configuration.ActionContext`1" />
            instance to the target container embedded within the <see cref="T:LinFu.IoC.Configuration.ActionContext`1" />
            class itself.
            </summary>
            <param name="context">The context that will be associated with the target container.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.UsingLambda`1">
            <summary>
            Represents a fluent class that creates
            a factory method that will be used
            in instantiating a specific service instance.
            </summary>
            <typeparam name="TService">The service type being instantiated.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.UsingLambda`1.#ctor(LinFu.IoC.Configuration.InjectionContext{`0})">
            <summary>
            Initializes the class using the given <paramref name="context" />.
            </summary>
            <param name="context">the <c>internal</c> context class that will be used to
            incrementally build enough information to inject a specific
            <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> instance into a container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.UsingLambda`1.Using``1">
            <summary>
            Creates a service instance using the
            concrete <typeparamref name="TConcrete" /> type
            as the implementation for the <typeparamref name="TService" />
            type.
            </summary>
            <typeparam name="TConcrete">The concrete implementation that implements <typeparamref name="TService" />. This class must have a default constructor.</typeparam>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.UsingLambda`1.Using(System.Func{LinFu.IoC.Interfaces.IServiceContainer,System.Object[],`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <seealso cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" />
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.UsingLambda`1.Using(System.Func{LinFu.IoC.Interfaces.IServiceContainer,`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <seealso cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" />
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.UsingLambda`1.Using(System.Func{`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Initializer">
            <summary>
            A class that initializes service instances that use
            the <see cref="T:LinFu.IoC.Configuration.IInitialize" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Initializer.#ctor">
            <summary>
            Initializes the class with the default settings.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Initializer`1">
            <summary>
            A class that initializes service instances that use
            the <see cref="T:LinFu.Reflection.IInitialize`1" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Initializer`1.#ctor(System.Func{LinFu.IoC.Interfaces.IServiceRequestResult,`0})">
            <summary>
            Initializes the class with the given <paramref name="getSource" /> delegate.
            </summary>
            <param name="getSource">The functor that will obtain the object instance that will be used to initialize a given service.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Initializer`1.PostProcess(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            Initializes every service that implements
            the <see cref="T:LinFu.Reflection.IInitialize`1" /> interface.
            </summary>
            <param name="result">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> instance that contains the service instance to be initialized.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Initializer`1.Initialize(LinFu.Reflection.IInitialize{`0},`0)">
            <summary>
            Initializes the <paramref name="target" /> with the given <paramref name="source" /> instance.
            </summary>
            <param name="target">The target to initialize.</param>
            <param name="source">The instance that will be introduced to the <see cref="T:LinFu.Reflection.IInitialize`1" /> instance.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.InitializerPlugin">
            <summary>
            A class that injects the <see cref="T:LinFu.IoC.Configuration.Initializer" /> postprocessor
            into every container that is created or loaded.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.InitializerPlugin.BeginLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            This override does absolutely nothing.
            </summary>
            <param name="target">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.InitializerPlugin.EndLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Injects the <see cref="T:LinFu.IoC.Configuration.Initializer" /> postprocessor into
            the container.
            </summary>
            <param name="target">
            </param>
        </member>
        <member name="T:LinFu.IoC.Configuration.AttributedFieldInjectionFilter">
            <summary>
            A default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" />
            class that returns fields which have the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />
            defined.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedFieldInjectionFilter.#ctor">
            <summary>
            Initializes the class and uses the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />
            to specify which field should be automatically injected with
            services from the container.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedFieldInjectionFilter.#ctor(System.Type)">
            <summary>
            Initializes the class and uses the <paramref name="attributeType" />
            to specify which fields should be automatically injected with
            services from the container.
            </summary>
            <param name="attributeType">The custom property attribute that will be used to mark properties for automatic injection.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedFieldInjectionFilter.GetMembers(System.Type,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Determines which members should be selected from the <paramref name="targetType" />
            using the <paramref name="container" /></summary>
            <param name="targetType">The target type that will supply the list of members that will be filtered.</param>
            <param name="container">The target container.</param>
            <returns>A list of <see cref="T:System.Reflection.FieldInfo" /> objects that pass the filter description.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.AttributedMethodInjectionFilter">
            <summary>
            A default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" />
            class that returns methods which have the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />
            defined.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedMethodInjectionFilter.#ctor">
            <summary>
            Initializes the class with the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" /> as the
            default injection attribute.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedMethodInjectionFilter.#ctor(System.Type)">
            <summary>
            Initializes the class and uses the <paramref name="attributeType" />
            as the custom injection attribute.
            </summary>
            <param name="attributeType">
            </param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedMethodInjectionFilter.GetMembers(System.Type,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Returns the methods that have the custom attribute type defined.
            </summary>
            <param name="targetType">The target type that contains the target methods.</param>
            <param name="container">The host container.</param>
            <returns>The list of methods that have the custom attribute type defined.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.AttributedPropertyInjectionFilter">
            <summary>
            A default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" />
            class that returns properties which have the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />
            defined.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedPropertyInjectionFilter.#ctor">
            <summary>
            Initializes the class and uses the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />
            to specify which properties should be automatically injected with
            services from the container.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedPropertyInjectionFilter.#ctor(System.Type)">
            <summary>
            Initializes the class and uses the <paramref name="attributeType" />
            to specify which properties should be automatically injected with
            services from the container.
            </summary>
            <param name="attributeType">The custom property attribute that will be used to mark properties for automatic injection.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedPropertyInjectionFilter.Filter(LinFu.IoC.Interfaces.IServiceContainer,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Determines which properties should be injected from the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
            <param name="container">The source container that will supply the property values for the selected properties.</param>
            <param name="properties">The list of properties to be filtered.</param>
            <returns>A list of properties that should be injected.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.AttributedPropertyInjectionFilter.GetMembers(System.Type,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Determines which members should be selected from the <paramref name="targetType" />
            using the <paramref name="container" /></summary>
            <param name="targetType">The target type that will supply the list of members that will be filtered.</param>
            <param name="container">The target container.</param>
            <returns>A list of <see cref="T:System.Reflection.PropertyInfo" /> objects that pass the filter description.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.AutoFieldInjector">
            <summary>
            A class that automatically injects fields using values
            provided by an <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoFieldInjector.Inject(System.Object,System.Reflection.FieldInfo,LinFu.IoC.Configuration.Interfaces.IArgumentResolver,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Injects a field with values from a given container.
            </summary>
            <param name="target">The target object.</param>
            <param name="member">The <see cref="T:System.Reflection.FieldInfo" /> instance that will store the service instance.</param>
            <param name="argumentResolver">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> that will determine which values will be assigned to the target member.</param>
            <param name="additionalArguments">The additional arguments that were passed to the <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> during the instantiation process. Note: This parameter will be ignored by this override.</param>
            <param name="container">The container that will provide the service instances.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.AutoMemberInjector`1">
            <summary>
            The base class that defines the behavior for automatically injecting service
            instances into type member instances.
            </summary>
            <typeparam name="TMember">
            </typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMemberInjector`1.BeginLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Does absolutely nothing.
            </summary>
            <param name="target">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMemberInjector`1.EndLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Inserts the <see cref="T:LinFu.IoC.Configuration.AutoPropertyInjector" /> class at the end
            of the PostProcessor chain.
            </summary>
            <param name="target">The target container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMemberInjector`1.PostProcess(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            Automatically injects service instances
            into properties as soon as they are initialized.
            </summary>
            <param name="result">The service request result that contains the service whose members will be injected with service instances.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMemberInjector`1.Inject(System.Object,`0,LinFu.IoC.Configuration.Interfaces.IArgumentResolver,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Injects services from the <paramref name="container" /> into the target <paramref name="member" /> instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="member">The <typeparamref name="TMember" /> instance that will store the service instance.</param>
            <param name="argumentResolver">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> that will determine which arguments will be assigned to the target member.</param>
            <param name="additionalArguments">The additional arguments that were passed to the <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> during the instantiation process.</param>
            <param name="container">The container that will provide the service instances.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMemberInjector`1.AutoInject(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            Injects a member service dependency into a target service instance.
            </summary>
            <param name="result">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> that will be processed for injection.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.AutoMethodInjector">
            <summary>
            A class that automatically invokes methods using arguments
            derived from existing instances from within a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoMethodInjector.Inject(System.Object,System.Reflection.MethodInfo,LinFu.IoC.Configuration.Interfaces.IArgumentResolver,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Injects services from the <paramref name="container" /> into the target <see cref="T:System.Reflection.MethodInfo" /> instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> instance that will store the service instance.</param>
            <param name="resolver">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> that will determine which arguments will be assigned to the target member.</param>
            <param name="additionalArguments">The additional arguments that were passed to the <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> during the instantiation process.</param>
            <param name="container">The container that will provide the service instances.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.AutoPropertyInjector">
            <summary>
            A class that automatically injects property dependencies into
            service instances.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.AutoPropertyInjector.Inject(System.Object,System.Reflection.PropertyInfo,LinFu.IoC.Configuration.Interfaces.IArgumentResolver,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Injects services from the <paramref name="container" /> into the target <see cref="T:System.Reflection.PropertyInfo" /> instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo" /> instance that will store the service instance.</param>
            <param name="resolver">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> that will determine which arguments will be assigned to the target member.</param>
            <param name="additionalArguments">The additional arguments that were passed to the <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> during the instantiation process.</param>
            <param name="container">The container that will provide the service instances.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1">
            <summary>
            Defines the basic behavior of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" /> interface.
            </summary>
            <typeparam name="TMember">The member type that will be filtered.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the <see cref="T:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1" /> class.
            </summary>
            <param name="source">The host container.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1.GetInjectableMembers(System.Type)">
            <summary>
            Returns the list of <typeparamref name="TMember" /> objects
            whose setters will injected with arbitrary values.
            </summary>
            <remarks>This implementation selects properties that are marked with the <see cref="T:LinFu.IoC.Configuration.InjectAttribute" />.</remarks>
            <param name="targetType">The target type that contains the target properties.</param>
            <returns>A set of properties that describe which parameters should be injected.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1.GetMembers(System.Type,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Determines which members should be selected from the <paramref name="targetType" />
            using the <paramref name="container" /></summary>
            <param name="targetType">The target type that will supply the list of members that will be filtered.</param>
            <param name="container">The target container.</param>
            <returns>A list of <typeparamref name="TMember" /> objects that pass the filter description.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMemberInjectionFilter`1.Filter(LinFu.IoC.Interfaces.IServiceContainer,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines which items should be injected from the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
            <param name="container">The source container that will supply the values for the selected members.</param>
            <param name="items">The list of properties that will be filtered.</param>
            <returns>A list of properties that will be injected.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Injectors.CustomFactoryInjector">
            <summary>
            A class that injects unnamed custom <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instances into a given
            service container.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Injectors.CustomFactoryInjector.#ctor(System.Type,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Initializes the class with the given service type and factory.
            </summary>
            <param name="serviceType">The service type that will be created by the factory.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used to create the service instance.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Injectors.CustomFactoryInjector.Preprocess(LinFu.IoC.Interfaces.IServiceRequest)">
            <summary>
            Injects the given factory into the target container.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequest" /> instance that describes the service that is currently being requested.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Injectors.NullMemberInjectionFilter`1">
            <summary>
            Represents a type of <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" />
            that always returns an empty match.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Injectors.NullMemberInjectionFilter`1.GetInjectableMembers(System.Type)">
            <summary>
            Always returns an empty list of injectable members.
            </summary>
            <param name="targetType">The type to be injected.</param>
            <returns>An empty list.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.PropertyInjectionFilter">
            <summary>
            An <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1" /> implementation
            that automatically selects properties whose property types
            currently exist in the target container.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertyInjectionFilter.GetMembers(System.Type,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Determines which members should be selected from the <paramref name="targetType" />
            using the <paramref name="container" /></summary>
            <param name="targetType">The target type that will supply the list of members that will be filtered.</param>
            <param name="container">The target container.</param>
            <returns>A list of <see cref="T:System.Reflection.PropertyInfo" /> objects that pass the filter description.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.InMemoryAssemblyLoader">
            <summary>
            An assembly loader that returns an existing
            <see cref="T:System.Reflection.Assembly" /> from memory.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.InMemoryAssemblyLoader.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes the class with an existing
            <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IContainerActivationContext">
            <summary>
            Represents a class that describes a request to instantiate a particular object type using a given
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.IContainerActivationContext.Container">
            <summary>
            Gets the value indicating the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance
            that will instantiate the <see cref="P:LinFu.AOP.Interfaces.IActivationContext.TargetType" />.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IFactoryBuilder">
            <summary>
            Represents a class that can generate <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instances
            from a given service type, implementing type, and lifecycle.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IFactoryBuilder.CreateFactory(System.Type,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Generates a <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that can create the <paramref name="serviceType" />
            using the <paramref name="implementingType" /> and <paramref name="lifecycle" /> model.
            </summary>
            <param name="serviceType">The service type that will be created by the factory.</param>
            <param name="implementingType">The concrete type that will provide the implementation for the service type.</param>
            <param name="lifecycle">The instancing behavior of the given service type.</param>
            <returns>A valid <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext">
            <summary>
            Represents the data associated with a <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinder`1" /> search.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext.TypeArguments">
            <summary>
            Gets or sets the value indicating the type arguments that will be passed to the target method.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext.Arguments">
            <summary>
            Gets or sets the value indicating the list of arguments that will be passed to the target method.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext.ReturnType">
            <summary>
            Gets or sets the value indicating the <see cref="T:System.Type">return type</see> of the target method.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderWithContainer`1">
            <summary>
            Represents a method finder that uses a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance
            during its method searches.
            </summary>
            <typeparam name="TMethod">
            </typeparam>
        </member>
        <member name="P:LinFu.IoC.Configuration.Interfaces.IMethodFinderWithContainer`1.Container">
            <summary>
            Gets the value indicating the service container that will be used in the
            method search.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.AssemblyContainerLoader">
            <summary>
            Represents a class that loads configuration information
            from a given assembly.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.FactoryAttributeLoader">
            <summary>
            A class that injects custom <see cref="T:LinFu.IoC.Interfaces.IFactory" /> and <see cref="T:LinFu.IoC.Interfaces.IFactory`1" />
            instances into an <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryAttributeLoader.Load(System.Type)">
            <summary>
            Loads an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> and <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> instance
            into a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance using the given
            <paramref name="sourceType" />.
            </summary>
            <param name="sourceType">The input type from which one or more factories will be created.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be null.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryAttributeLoader.CanLoad(System.Type)">
            <summary>
            Determines whether or not the current <paramref name="sourceType" />
            can be loaded.
            </summary>
            <param name="sourceType">The source type currently being loaded.</param>
            <returns>Returns <c>true</c> if the type is a class type; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryAttributeLoader.GetResults(System.Type,System.Collections.Generic.IEnumerable{LinFu.IoC.Configuration.FactoryAttribute},System.Func{LinFu.IoC.Interfaces.IFactoryRequest,System.Object})">
            <summary>
            Instantiates the <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instances associated with the <paramref name="sourceType" /> and
            adds those factories to the target container upon initialization.
            </summary>
            <param name="sourceType">The <see cref="T:System.Type" /> currently being inspected.</param>
            <param name="attributeList">The list of <see cref="T:LinFu.IoC.Configuration.FactoryAttribute" /> instances currently declared on on the source type.</param>
            <param name="getFactoryInstance">The functor that will be responsible for generating the factory instance.</param>
            <returns>A list of actions that will add the factories to the target container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.FactoryAttributeLoader.GetFactory(System.Type,System.Func{LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory},System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Instantiates the given factory using the <paramref name="getStronglyTypedFactory">factory functor.</paramref></summary>
            <param name="currentServiceType">The service type that will be created by the factory.</param>
            <param name="getStronglyTypedFactory">The functor that will be responsible for creating the factory itself.</param>
            <param name="implementedInterfaces">The list of <see cref="T:LinFu.IoC.Interfaces.IFactory`1" /> interfaces that are implemented by the source type.</param>
            <returns>A valid factory instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Loaders.ImplementsAttributeLoader">
            <summary>
            A loader class that scans a type for <see cref="T:LinFu.IoC.Configuration.ImplementsAttribute" />
            attribute declarations and creates a factory for each corresponding
            attribute instance.
            </summary>
            <seealso cref="T:LinFu.IoC.Interfaces.IFactory" />
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.ImplementsAttributeLoader.Load(System.Type)">
            <summary>
            Converts a given <see cref="T:System.Type" /> into
            a set of <see cref="T:System.Action`1" /> instances so that
            the <see cref="T:LinFu.IoC.Interfaces.IContainer" /> instance can be loaded
            with the given factories.
            </summary>
            <param name="sourceType">The input type from which one or more factories will be created.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be null.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.ImplementsAttributeLoader.CanLoad(System.Type)">
            <summary>
            Determines whether or not the current <paramref name="sourceType" />
            can be loaded.
            </summary>
            <param name="sourceType">The source type currently being loaded.</param>
            <returns>Returns <c>true</c> if the type is a class type; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.ImplementsAttributeLoader.CreateFactory(System.Type,System.Type,LinFu.IoC.Configuration.LifecycleType)">
            <summary>
            Creates a factory instance that can create instaces of the given
            <paramref name="serviceType" />  using the <paramref name="implementingType" />
            as the implementation.
            </summary>
            <param name="serviceType">The service being implemented.</param>
            <param name="implementingType">The actual type that will implement the service.</param>
            <param name="lifecycle">The <see cref="T:LinFu.IoC.Configuration.LifecycleType" /> that determines the lifetime of each instance being created.</param>
            <returns>A valid <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Loader">
            <summary>
            Represents a class that can dynamically configure
            <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instances at runtime.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loader.#ctor">
            <summary>
            Initializes the loader using the default values.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.Loader.AssemblyLoader">
            <summary>
            Gets or sets the value indicating the <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance
            that will be used to load assemblies into memory.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Loaders.PostProcessorLoader">
            <summary>
            A class that automatically loads <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" />
            instances and configures a loader to inject those postprocessors
            into a container upon initialization.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.PostProcessorLoader.CanLoad(System.Type)">
            <summary>
            Determines if the plugin loader can load the <paramref name="inputType" />.
            </summary>
            <remarks>The target type must implement the <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> interface before it can be loaded into memory.</remarks>
            <param name="inputType">The target type that might contain the target instance.</param>
            <returns>
                <c>true</c> if the type can be loaded; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.PostProcessorLoader.Load(System.Type)">
            <summary>
            Loads a set of <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> instances
            so that they can be loaded into a container upon initialization.
            </summary>
            <param name="inputType">The type that will be used to configure the target loader.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Loaders.PreProcessorLoader">
            <summary>
            A class that automatically loads <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" />
            instances and configures a loader to inject those postprocessors
            into a container upon initialization.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.PreProcessorLoader.CanLoad(System.Type)">
            <summary>
            Determines if the plugin loader can load the <paramref name="inputType" />.
            </summary>
            <remarks>The target type must implement the <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> interface before it can be loaded into memory.</remarks>
            <param name="inputType">The target type that might contain the target instance.</param>
            <returns>
                <c>true</c> if the type can be loaded; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.Loaders.PreProcessorLoader.Load(System.Type)">
            <summary>
            Loads a set of <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> instances
            so that they can be loaded into a container upon initialization.
            </summary>
            <param name="inputType">The type that will be used to configure the target loader.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.MethodBuilder">
            <summary>
            A class that dynamically generates calls to a <see cref="T:System.Reflection.MethodInfo" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodBuilder.PushInstance(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Pushes the method target onto the evaluation stack.
            </summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the method body.</param>
            <param name="method">The target method.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodBuilder.PushMethodArguments(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            Pushes the method arguments onto the stack.
            </summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the target method body.</param>
            <param name="targetMethod">The target method that will be invoked.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodBuilder.GetReturnType(System.Reflection.MethodInfo)">
            <summary>
            Determines the return type from the target <paramref name="method" />.
            </summary>
            <param name="method">The target method itself.</param>
            <returns>The method return type.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodBuilder.GetParameterList(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determines the parameter types of the dynamically generated method.
            </summary>
            <param name="existingMethod">The target method.</param>
            <param name="parameterTypes">The target method argument types.</param>
            <returns>The list of <see cref="T:System.Type" /> objects that describe the signature of the method to generate.</returns>
            <remarks>This override will add an additional parameter type to accomodate the method target.</remarks>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodBuilder.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Emits the instruction to call the target <paramref name="method" /></summary>
            <param name="IL">The <see cref="T:System.Reflection.Emit.ILGenerator" /> of the target method body.</param>
            <param name="method">The method that will be invoked.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.BaseMethodInvoke`1">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodInvoke`1" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodInvoke`1.#ctor">
            <summary>
            Initializes the class with the default values.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.BaseMethodInvoke`1.MethodBuilder">
            <summary>
            Gets or sets the value indicating the method builder that will be used to
            create the target method.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodInvoke`1.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the class with the <paramref name="source">source service container.</paramref></summary>
            <param name="source">The <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance that will initialize this class.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodInvoke`1.Invoke(System.Object,`0,System.Object[])">
            <summary>
            Instantiates an object instance with the <paramref name="targetMethod" />
            and <paramref name="arguments" />.
            </summary>
            <param name="target">The target object reference. In this particular case, this parameter will be ignored.</param>
            <param name="targetMethod">The target method.</param>
            <param name="arguments">The arguments to be used with the method.</param>
            <returns>An object reference that represents the method return value.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodInvoke`1.DoInvoke(System.Object,`0,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Invokes the <paramref name="targetMethod" /> with the given <paramref name="arguments" />.
            </summary>
            <param name="target">The target instance.</param>
            <param name="originalMethod">The original method that describes the target method.</param>
            <param name="targetMethod">The actual method that will be invoked.</param>
            <param name="arguments">The method arguments.</param>
            <returns>The return value from the target method.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.BaseMethodInvoke`1.GenerateTargetMethod(`0)">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.DynamicMethod" /> that will be used as the
            factory method and stores it in the method cache.
            </summary>
            <param name="targetMethod">The constructor that will be used to instantiate the target type.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.MethodFinderContext">
            <summary>
            Represents the data associated with a <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinder`1" /> search.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinderContext.#ctor(System.Object[])">
            <summary>
            Initializes the context with the default values.
            </summary>
            <param name="arguments">The list of arguments that will be passed to the target method.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinderContext.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Object},System.Type)">
            <summary>
            Initializes the context with the default values.
            </summary>
            <param name="typeArguments">The type arguments that will be used to construct the target method.</param>
            <param name="arguments">The list of arguments that will be passed to the target method.</param>
            <param name="returnType">The type that must be returned by the target method.</param>
        </member>
        <member name="P:LinFu.IoC.Configuration.MethodFinderContext.TypeArguments">
            <summary>
            Gets or sets the value indicating the type arguments that will be passed to the target method.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.MethodFinderContext.Arguments">
            <summary>
            Gets or sets the value indicating the list of arguments that will be passed to the target method.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.MethodFinderContext.ReturnType">
            <summary>
            Gets or sets the value indicating the <see cref="T:System.Type">return type</see> of the target method.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.MethodInvoke">
            <summary>
            A class that invokes methods.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodInvoke.#ctor">
            <summary>
            Initializes the class with the default values.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodInvoke.DoInvoke(System.Object,System.Reflection.MethodInfo,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Invokes the <paramref name="targetMethod" /> with the given <paramref name="arguments" />.
            </summary>
            <param name="target">The target instance.</param>
            <param name="originalMethod">The original method that describes the target method.</param>
            <param name="targetMethod">The actual method that will be invoked.</param>
            <param name="arguments">The method arguments.</param>
            <returns>The return value from the target method.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.PropertySetter">
            <summary>
            A class responsible for setting property values.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertySetter.Set(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the value of the <paramref name="targetProperty" />.
            </summary>
            <param name="target">The target instance that contains the property to be modified.</param>
            <param name="targetProperty">The property that will store the given value.</param>
            <param name="value">The value that will be assigned to the property.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.PropertySetter.GenerateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Generates an <see cref="T:System.Action`2" /> delegate that will be used
            as the property setter for a particular type.
            </summary>
            <param name="targetProperty">The property that will be modified.</param>
            <returns>A property setter.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.RecursiveDependencyException">
            <summary>
            The exception thrown when a recursive dependency is detected
            inside a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.RecursiveDependencyException.#ctor(System.Collections.Generic.LinkedList{System.Type})">
            <summary>
            Initializes the <see cref="T:LinFu.IoC.Configuration.RecursiveDependencyException" />
            class with the <paramref name="typeChain">chain</paramref>
            of depedencies that caused the exception.
            </summary>
            <param name="typeChain">The sequence of types that caused the dependency exception.</param>
        </member>
        <member name="P:LinFu.IoC.Configuration.RecursiveDependencyException.TypeChain">
            <summary>
            Gets the value indicating the chain of types that caused the exception.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.RecursiveDependencyException.Message">
            <summary>
            Gets the value indicating the error message from the <see cref="T:LinFu.IoC.Configuration.RecursiveDependencyException" />.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.ReflectionMethodBuilder`1">
            <summary>
            Represents a <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodBuilder`1" /> type that simply lets
            methods pass through it without performing any modifications to those methods.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ReflectionMethodBuilder`1.CreateMethod(`0)">
            <summary>
            Returns the <paramref name="existingMethod" /> unmodified.
            </summary>
            <param name="existingMethod">The method to be modified.</param>
            <returns>The modified method.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.ArgumentResolver">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ArgumentResolver.ResolveFrom(System.Collections.Generic.IEnumerable{LinFu.IoC.Configuration.Interfaces.INamedType},LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Generates method arguments from the given <paramref name="parameterTypes" />
            and <paramref name="container" />.
            </summary>
            <param name="parameterTypes">The parameter types for the target method.</param>
            <param name="container">The container that will provide the method arguments.</param>
            <param name="additionalArguments">The additional arguments that will be passed to the target method.</param>
            <returns>An array of objects that represent the arguments to be passed to the target method.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ArgumentResolver.AddArrayArgument(System.Type,LinFu.IoC.Interfaces.IServiceContainer,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Constructs an array of services using the services currently available
            in the <paramref name="container" />.
            </summary>
            <param name="parameterType">The current parameter type.</param>
            <param name="container">The container that will be used to build the array of services.</param>
            <param name="argumentList">The list that will store new service array.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.ArgumentResolver.AddEnumerableArgument(System.Type,LinFu.IoC.Interfaces.IServiceContainer,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Determines whether or not a parameter type is an existing
            list of available services and automatically constructs the
            service list and adds it to the <paramref name="argumentList" />.
            </summary>
            <param name="parameterType">The current constructor parameter type.</param>
            <param name="container">The container that will provide the argument values.</param>
            <param name="argumentList">The list that will hold the arguments to be passed to the constructor.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.ConstructorResolver">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMemberResolver`1" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorResolver.#ctor">
            <summary>
            Initializes the class with the default values.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorResolver.#ctor(System.Func{LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Configuration.Interfaces.IMethodFinder{System.Reflection.ConstructorInfo}})">
            <summary>
            Initializes the class using the custom method finder.
            </summary>
            <param name="getFinder">The functor that will be used to instantiate the method finder.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorResolver.GetMembers(System.Type)">
            <summary>
            Returns the constructors that belong to the <paramref name="concreteType" />.
            </summary>
            <param name="concreteType">The type that contains the list of constructors.</param>
            <returns>A list of constructors that belong to the <paramref name="concreteType" />.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.ConstructorResolver.GetDefaultResult(System.Type)">
            <summary>
            Returns the parameterless constructor in case the search fails.
            </summary>
            <param name="concreteType">The target type that contains the default constructor.</param>
            <returns>The default constructor.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.MemberResolver`1">
            <summary>
            Represents a class that can choose a member that best matches
            the services currently available in a given <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
            <typeparam name="TMember">The member type that will be searched.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.#ctor">
            <summary>
            The default constructor for the <see cref="T:LinFu.IoC.Configuration.MemberResolver`1" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.#ctor(System.Func{LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Configuration.Interfaces.IMethodFinder{`0}})">
            <summary>
            Initializes the class with a <paramref name="getFinder">functor</paramref>
            that will be used to instantiate the method finder that will be used in the search.
            </summary>
            <param name="getFinder">The functor that will be used to instantiate the method finder.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.ResolveFrom(System.Type,LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Uses the <paramref name="container" /> to determine which member to use from
            the <paramref name="concreteType">concrete type</paramref>.
            </summary>
            <param name="concreteType">The target type.</param>
            <param name="container">The container that contains the member values that will be used to invoke the members.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
            <returns>A member instance if a match is found; otherwise, it will return <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.GetMethodFinder(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Determines the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinder`1" /> that will be used
            in the method search.
            </summary>
            <param name="container">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.GetDefaultResult(System.Type)">
            <summary>
            The method used to retrieve the default result if no
            other alternative is found.
            </summary>
            <param name="concreteType">The target type that contains the default member.</param>
            <returns>The default member result.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MemberResolver`1.GetMembers(System.Type)">
            <summary>
            Lists the members associated with the <paramref name="concreteType" />.
            </summary>
            <param name="concreteType">The target type that contains the type members.</param>
            <returns>A list of members that belong to the concrete type.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.MethodFinder`1">
            <summary>
            Represents a class that determines which method best matches the
            services currently in the target container.
            </summary>
            <typeparam name="T">The method type to search.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinder`1.GetBestMatch(System.Collections.Generic.IEnumerable{`0},LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Determines which method best matches the
            services currently in the target container.
            </summary>
            <param name="items">The list of methods to search.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
            <returns>Returns the method with the most resolvable parameters from the target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinder`1.SelectBestMatch(System.Collections.Generic.IEnumerable{LinFu.Finders.Interfaces.IFuzzyItem{`0}})">
            <summary>
            Determines which item among the <paramref name="candidates" /> is the best match.
            </summary>
            <param name="candidates">The list of possible matches.</param>
            <returns>The best match if found; otherwise, it should return <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinder`1.Rank(System.Collections.Generic.IList{LinFu.Finders.Interfaces.IFuzzyItem{`0}},LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Adds additional <see cref="T:LinFu.Finders.Interfaces.ICriteria`1" /> to the fuzzy search list.
            </summary>
            <param name="methods">The list of methods to rank.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.MethodFinder`1.CheckArguments(System.Collections.Generic.IList{LinFu.Finders.Interfaces.IFuzzyItem{`0}},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Attempts to match the <paramref name="additionalArgumentTypes" /> against the <paramref name="fuzzyList">list of methods</paramref>.
            </summary>
            <param name="fuzzyList">The list of items currently being compared.</param>
            <param name="additionalArgumentTypes">The set of <see cref="T:System.Type" /> instances that describe each supplied argument type.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Resolvers.MethodFinderFromContainer`1">
            <summary>
            A <see cref="T:LinFu.IoC.Configuration.MethodFinder`1" /> type that uses a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            instance to find a method with the most resolvable parameters.
            </summary>
            <typeparam name="TMethod">The method type that will be searched.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.MethodFinderFromContainer`1.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the target with the host container.
            </summary>
            <param name="container">The host <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</param>
        </member>
        <member name="P:LinFu.IoC.Configuration.Resolvers.MethodFinderFromContainer`1.Container">
            <summary>
            Gets the value indicating the service container that will be used in the
            method search.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.MethodFinderFromContainer`1.CheckParameters(LinFu.Finders.Interfaces.IFuzzyItem{`0},LinFu.IoC.Interfaces.IServiceContainer,System.Int32)">
            <summary>
            Examines a <see cref="T:System.Reflection.ConstructorInfo" /> instance
            and determines if it can be instantiated with the services embedded in
            the target <paramref name="container" />.
            </summary>
            <param name="fuzzyItem">The <see cref="T:LinFu.Finders.FuzzyItem`1" /> that represents the constructor to be examined.</param>
            <param name="container">The container that contains the services that will be used to instantiate the target type.</param>
            <param name="maxIndex">Indicates the index that
            marks the point where the user-supplied arguments begin.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Resolvers.MethodFinderFromContainer`1.Rank(System.Collections.Generic.IList{LinFu.Finders.Interfaces.IFuzzyItem{`0}},LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Adds additional <see cref="T:LinFu.Finders.Interfaces.ICriteria`1" /> to the fuzzy search list.
            </summary>
            <param name="methods">The list of methods to rank.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.ServiceInstance">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Interfaces.IServiceInstance" /> interface.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.TypeCounter">
            <summary>
            Counts the number of occurrences of a specific type.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Configuration.TypeCounter.AvailableTypes">
            <summary>
            Gets the value indicating the types that are
            currently being counted.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.TypeCounter.Increment(System.Type)">
            <summary>
            Increments the count for the current <paramref name="type" />.
            </summary>
            <param name="type">The type being counted.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.TypeCounter.CountOf(System.Type)">
            <summary>
            Returns the number of occurrences of a specific <paramref name="type" />.
            </summary>
            <param name="type">The type being counted.</param>
            <returns>The number of occurrences for the given type.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.TypeCounter.Decrement(System.Type)">
            <summary>
            Decrements the count for the current <paramref name="type" />.
            </summary>
            <param name="type">The type being counted.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.TypeCounter.Reset">
            <summary>
            Resets the counts back to zero.
            </summary>
        </member>
        <member name="T:LinFu.IoC.CreatorFromInstance">
            <summary>
            Represents an <see cref="T:LinFu.IoC.Interfaces.ICreateInstance" /> type that generates an object instance from an existing instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.CreatorFromInstance.#ctor(System.Object)">
            <summary>
            Initializes the class with the target <paramref name="instance" />.
            </summary>
            <param name="instance">The instance that will be returned every time the <see cref="M:LinFu.IoC.CreatorFromInstance.CreateFrom(LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory)" /> method is called.</param>
        </member>
        <member name="M:LinFu.IoC.CreatorFromInstance.CreateFrom(LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Returns the object instance that given when the <see cref="T:LinFu.IoC.CreatorFromInstance" /> class instance was initialized.
            </summary>
            <param name="factoryRequest">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the context of the service request.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used to instantiate the service type.</param>
            <returns>A valid service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.DefaultCreator">
            <summary>
            Represents the default implementation for the <see cref="T:LinFu.IoC.Interfaces.ICreateInstance" /></summary>
        </member>
        <member name="M:LinFu.IoC.DefaultCreator.CreateFrom(LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Creates a service instance using the given <paramref name="factoryRequest" /> and <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.
            </summary>
            <param name="factoryRequest">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the context of the service request.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used to instantiate the service type.</param>
            <returns>A valid service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.DefaultGetServiceBehavior">
            <summary>
            Represents the default implementation for the <see cref="T:LinFu.IoC.Interfaces.IGetService" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.DefaultGetServiceBehavior.#ctor(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the class with the given <paramref name="container" /> instance.
            </summary>
            <param name="container">The target service container.</param>
        </member>
        <member name="M:LinFu.IoC.DefaultGetServiceBehavior.#ctor(LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Interfaces.ICreateInstance,LinFu.IoC.Interfaces.IPreProcessor,LinFu.IoC.Interfaces.IPostProcessor)">
            <summary>
            Initializes the class with the given <paramref name="container" /> instance.
            </summary>
            <param name="container">The target service container.</param>
            <param name="creator">The <see cref="T:LinFu.IoC.Interfaces.ICreateInstance" /> instance responsible for instantiating service types.</param>
            <param name="preProcessor">The <see cref="T:LinFu.IoC.Interfaces.IPreProcessor" /> that will allow users to intercept a given service request.</param>
            <param name="postProcessor">The <see cref="T:LinFu.IoC.Interfaces.IPostProcessor" /> instance that will handle the results of a given service request.</param>
        </member>
        <member name="M:LinFu.IoC.DefaultGetServiceBehavior.GetService(LinFu.IoC.Interfaces.IServiceRequest)">
            <summary>
            Instantiates the service described by the <paramref name="serviceRequest" />.
            </summary>
            <param name="serviceRequest">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequest" /> that describes the service that needs to be instantiated.</param>
            <returns>A valid object reference if the service can be found; otherwise, it will return <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.BaseFactory`1">
            <summary>
            A factory base class that combines both the IFactory and
            the IFactory&lt;T&gt; interfaces into a single class.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:LinFu.IoC.Factories.BaseFactory`1.LinFu#IoC#Interfaces#IFactory#CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Creates a service instance using the given container.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>An object instance that represents the service to be created. This cannot be <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Factories.BaseFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Creates a service instance using the given container.
            </summary>
            <remarks>
                <see cref="T:LinFu.IoC.Interfaces.IFactory" /> developers can inherit from this class
            instead of having to write their own custom factories
            from scratch. This should cut down on some of the boilerplate
            code necessary to get a factory class up and running.
            </remarks>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>An object instance that represents the service to be created. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.DelegateFactory">
            <summary>
            Represents a class that uses a <see cref="T:System.MulticastDelegate" />
            to instantiate a service instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Factories.DelegateFactory.#ctor(System.MulticastDelegate)">
            <summary>
            Initializes the class with the given <paramref name="targetDelegate" /></summary>
            <param name="targetDelegate">The delegate that will be used to instantiate the factory.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.DelegateFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Instantiates the service type using the given delegate.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> that describes the service that needs to be created.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.FactoryAdapter`1">
            <summary>
            An adapter that converts strongly-typed IFactory&lt;T&gt;
            instances into an equivalent IFactory instance.
            </summary>
            <typeparam name="T">The service type to create.</typeparam>
        </member>
        <member name="M:LinFu.IoC.FactoryAdapter`1.#ctor(System.Object)">
            <summary>
            Creates the factory adapter using the given
            IFactory&lt;T&gt; instance.
            </summary>
            <param name="factory">The factory instance that
            will be called every time the <see cref="M:LinFu.IoC.Interfaces.IFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)" /> method
            is called. </param>
        </member>
        <member name="P:LinFu.IoC.FactoryAdapter`1.Factory">
            <summary>
            The factory that will create the service instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.FactoryAdapter`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Overridden. Uses the strongly-typed factory
            to create the service instance every time
            the <see cref="M:LinFu.IoC.Interfaces.IFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)" /> method
            is called.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>An object instance that represents the service to be created. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.FunctorFactory">
            <summary>
            A class that converts a delegate into an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Factories.FunctorFactory.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,System.Object})">
            <summary>
            Initializes the class with the given <paramref name="factoryMethod" />.
            </summary>
            <param name="factoryMethod">The delegate that will be used to instantiate a type.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.FunctorFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Instantiates an object reference using the given factory method.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A non-null object reference that represents the service type.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.FunctorFactory`1">
            <summary>
            A class that converts a delegate into an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Factories.FunctorFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,System.Object})">
            <summary>
            Initializes the class with the given <paramref name="factoryMethod" />.
            </summary>
            <param name="factoryMethod">The delegate that will be used to instantiate a type.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.FunctorFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,`0})">
            <summary>
            Initializes the class with the given <paramref name="factoryMethod" />.
            </summary>
            <param name="factoryMethod">The delegate that will be used to instantiate a type.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.FunctorFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Instantiates an object reference using the given factory method.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A non-null object reference that represents the service type.</returns>
        </member>
        <member name="T:LinFu.IoC.InstanceFactory">
            <summary>
            A factory that uses an existing object reference
            instead of creating a new service.
            </summary>
        </member>
        <member name="M:LinFu.IoC.InstanceFactory.#ctor(System.Object)">
            <summary>
            Creates a factory using the existing <paramref name="instance" />.
            </summary>
            <param name="instance">The existing object reference that the factory will return.</param>
        </member>
        <member name="M:LinFu.IoC.InstanceFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            A method that returns the existing object reference associated with
            this factory.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A non-null object reference.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.LazyFactory">
            <summary>
            Represents an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> class that instantiates a factory only on request.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Factories.LazyFactory.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory})">
            <summary>
            Instantiates the class with the factory functor method.
            </summary>
            <param name="getFactory">The functor that will be responsible for instantiating the actual factory.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.LazyFactory.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Instantiates the actual factory instance and uses it to instantiate the target service type.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> that describes the service to be created.</param>
            <returns>A valid service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.LazyFactory`1">
            <summary>
            Represents a factory that returns strongly-typed IFactory instances.
            </summary>
            <typeparam name="T">The service type to be created.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Factories.LazyFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory})">
            <summary>
            Initializes the factory with the given <paramref name="getFactory" /> functor.
            </summary>
            <param name="getFactory">The functor that will instantiate the actual factory instance.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.LazyFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Instantiates the service type using the actual factory.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the service to be created.</param>
            <returns>
            </returns>
        </member>
        <member name="T:LinFu.IoC.Factories.OncePerRequestFactory`1">
            <summary>
            A factory that creates a unique service instance every time
            the <see cref="M:LinFu.IoC.Factories.OncePerRequestFactory{`0}.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)" /> method is called.
            </summary>
            <typeparam name="T">The type of service to instantiate.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Factories.OncePerRequestFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,`0})">
            <summary>
            Initializes the factory class using the <paramref name="createInstance" />
            parameter as a factory delegate.
            </summary>
            <example>
            The following is an example of initializing a <c>OncePerRequestFactory&lt;T&gt;</c>
            type:
            <code>
            // Define the factory delegate
            Func&lt;IFactoryRequest, ISomeService&gt; createService = container=&gt;new SomeServiceImplementation();
            // Create the factory
            var factory = new OncePerRequestFactory&lt;ISomeService&gt;(createService);
            // Use the service instance
            var service = factory.CreateInstance(null);
            // ...
            </code></example>
            <param name="createInstance">The delegate that will be used to create each new service instance.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.OncePerRequestFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            This method creates a new service instance every time
            it is invoked.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A non-null object reference.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.OncePerThreadFactory`1">
            <summary>
            A factory that creates service instances that are unique
            from within the same thread as the factory itself.
            </summary>
            <typeparam name="T">The type of service to instantiate.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Factories.OncePerThreadFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,`0})">
            <summary>
            Initializes the factory class using the <paramref name="createInstance" />
            parameter as a factory delegate.
            </summary>
            <example>
            The following is an example of initializing a <c>OncePerThreadFactory&lt;T&gt;</c>
            type:
            <code>
            // Define the factory delegate
            Func&lt;IFactoryRequest, ISomeService&gt; createService = container=&gt;new SomeServiceImplementation();
            // Create the factory
            var factory = new OncePerThreadFactory&lt;ISomeService&gt;(createService);
            // Use the service instance
            var service = factory.CreateInstance(null);
            // ...
            </code></example>
            <param name="createInstance">The delegate that will be used to create each new service instance.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.OncePerThreadFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Creates the service instance using the given <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" />
            instance. Every service instance created from this factory will
            only be created once per thread.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A a service instance as thread-wide singleton.</returns>
        </member>
        <member name="T:LinFu.IoC.Factories.SingletonFactory`1">
            <summary>
            A factory that creates Singletons. Each service that this factory creates will only be created once per concrete type.
            </summary>
            <typeparam name="T">The type of service to instantiate.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Factories.SingletonFactory`1.#ctor(System.Func{LinFu.IoC.Interfaces.IFactoryRequest,`0})">
            <summary>
            Initializes the factory class using the <paramref name="createInstance" />
            parameter as a factory delegate.
            </summary>
            <example>
            The following is an example of initializing a <c>SingletonFactory&lt;T&gt;</c>
            type:
            <code>
            // Define the factory delegate
            Func&lt;IFactoryRequest, ISomeService&gt; createService = container=&gt;new SomeServiceImplementation();
            // Create the factory
            var factory = new SingletonFactory&lt;ISomeService&gt;(createService);
            // Use the service instance
            var service = factory.CreateInstance(null);
            // ...
            </code></example>
            <param name="createInstance">The delegate that will be used to create each new service instance.</param>
        </member>
        <member name="M:LinFu.IoC.Factories.SingletonFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            A method that creates a service instance as a singleton.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>A service instance as a singleton.</returns>
        </member>
        <member name="T:LinFu.IoC.FactoryExtensions">
            <summary>
            Extends the <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance with a few helper methods.
            </summary>
        </member>
        <member name="M:LinFu.IoC.FactoryExtensions.CreateInstance(LinFu.IoC.Interfaces.IFactory,System.Type,LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Creates an object instance.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="serviceType">The requested service type.</param>
            <param name="container">The target service contaienr.</param>
            <param name="additionalArguments">The additional arguments that will be used to create the service instance.</param>
            <returns>A service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.FactoryRequest">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> interface.
            </summary>
        </member>
        <member name="P:LinFu.IoC.FactoryRequest.Container">
            <summary>
            Gets the value indicating the service container that made the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.FactoryRequest.ServiceName">
            <summary>
            Gets the value indicating the service name.
            </summary>
            <remarks>A null service name indicates that no service name was given during the request.</remarks>
        </member>
        <member name="P:LinFu.IoC.FactoryRequest.ServiceType">
            <summary>
            Gets the value indicating the requested service type.
            </summary>
        </member>
        <member name="P:LinFu.IoC.FactoryRequest.Arguments">
            <summary>
            Gets the value indicating the additional arguments given in the factory request.
            </summary>
        </member>
        <member name="T:LinFu.IoC.BaseFactoryStorage">
            <summary>
            Represents the default base implementation of the <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.BaseFactoryStorage.GetFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Determines which factories should be used
            for a particular service request.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <returns>A factory instance.</returns>
        </member>
        <member name="M:LinFu.IoC.BaseFactoryStorage.AddFactory(LinFu.IoC.Interfaces.IServiceInfo,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds a <see cref="T:LinFu.IoC.Interfaces.IFactory" /> to the current <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.BaseFactoryStorage.ContainsFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Determines whether or not a factory exists in storage.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <returns>Returns <c>true</c> if the factory exists; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="P:LinFu.IoC.BaseFactoryStorage.AvailableFactories">
            <summary>
            Gets a value indicating the list of <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> objects
            that describe each available factory in the current <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" />
            instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.FactoryStorage">
            <summary>
            Represents an <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> instance that adds generics support to the <see cref="T:LinFu.IoC.BaseFactoryStorage" /> implementation.
            </summary>
        </member>
        <member name="M:LinFu.IoC.FactoryStorage.ContainsFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Determines whether or not an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance
            can be used to create the given service described by the <paramref name="serviceInfo" /> object.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the service to be created.</param>
            <returns>
                <c>True</c> if the service can be created; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.FactoryStorage.GetFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Obtains the <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that can instantiate the
            service described by the <paramref name="serviceInfo" /> object instance.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the service to be created.</param>
            <returns>A <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance if the service can be instantiated; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.FactoryStorage.GetDefaultFactory(System.String,System.Type,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Gets the default factory for a particular service type if no other factory instance can be found.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="serviceType">The service type.</param>
            <param name="factory">The original factory instance that was supposed to be created in order to instantiate the service instance.</param>
            <returns>The actual factory instance that will be used to create the service instance.</returns>
        </member>
        <member name="M:LinFu.IoC.FactoryStorage.GetGenericFactory(LinFu.IoC.Interfaces.IServiceInfo,LinFu.IoC.Interfaces.IFactory,System.String,System.Type)">
            <summary>
            Gets the generic factory for a concrete service type.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the service to be created.</param>
            <param name="factory">The factory instance that will be used to create the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="actualServiceType">The service type.</param>
            <returns>A factory instance that can create the generic type.</returns>
        </member>
        <member name="T:LinFu.IoC.FactoryStorageExtensions">
            <summary>
            An extension class that adds a few helper methods to the
            <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.FactoryStorageExtensions.AddFactory(LinFu.IoC.Interfaces.IFactoryStorage,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type},LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds a factory to the current <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> instance.
            </summary>
            <param name="storage">The <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object that will store the target factory.</param>
            <param name="serviceName">The name that will be associated with the target factory.</param>
            <param name="serviceType">The service type that the factory will be able to create.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.FactoryStorageExtensions.GetFactory(LinFu.IoC.Interfaces.IFactoryStorage,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Determines which factories should be used
            for a particular service request.
            </summary>
            <param name="storage">The <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object that holds the target factory.</param>
            <param name="serviceName">The name that will be associated with the target factory.</param>
            <param name="serviceType">The service type that the factory will be able to create.</param>
            <param name="additionalParameters">The list of additional parameter values that this factory type will use to instantiate the service.</param>
            <returns>A factory instance.</returns>
        </member>
        <member name="M:LinFu.IoC.FactoryStorageExtensions.GetFactory(LinFu.IoC.Interfaces.IFactoryStorage,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines which factories should be used
            for a particular service request.
            </summary>
            <param name="storage">The <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object that holds the target factory.</param>
            <param name="serviceName">The name that will be associated with the target factory.</param>
            <param name="serviceType">The service type that the factory will be able to create.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <returns>A factory instance.</returns>
        </member>
        <member name="M:LinFu.IoC.FactoryStorageExtensions.ContainsFactory(LinFu.IoC.Interfaces.IFactoryStorage,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether or not a factory exists in storage.
            </summary>
            <param name="storage">The <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object that holds the target factory.</param>
            <param name="serviceName">The name that will be associated with the target factory.</param>
            <param name="serviceType">The service type that the factory will be able to create.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <returns>Returns <c>true</c> if the factory exists; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Interceptors.LazyInterceptor`1">
            <summary>
            An interceptor class that instantiates a target type only when
            the methods for that target are invoked.
            </summary>
            <typeparam name="T">The type of object to intercept.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Interceptors.LazyInterceptor`1.#ctor(System.Func{`0})">
            <summary>
            Initializes the class with the <paramref name="getInstance" />
            factory method.
            </summary>
            <param name="getInstance">The functor that will be used to create the actual object instance.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.LazyInterceptor`1.GetTarget(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            A method that uses the given factory method to provide a target
            for the method currently being invoked.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> object that describes the current invocation context.</param>
            <returns>The target itself.</returns>
        </member>
        <member name="M:LinFu.IoC.Interceptors.LazyInterceptor`1.Intercept(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Intercepts the method and initializes the target instance before the
            actual object is invoked.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> that describes the execution context.</param>
            <returns>The return value of the target method.</returns>
        </member>
        <member name="T:LinFu.IoC.Interfaces.ICreateInstance">
            <summary>
            Represents a type that can create service instances from a given <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" />.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interfaces.ICreateInstance.CreateFrom(LinFu.IoC.Interfaces.IFactoryRequest,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Creates a service instance using the given <paramref name="factoryRequest" /> and <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.
            </summary>
            <param name="factoryRequest">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the context of the service request.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used to instantiate the service type.</param>
            <returns>A valid service instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Interfaces.IFactoryStorage">
            <summary>
            Represents a class that stores factory instances.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Interfaces.IFactoryStorage.AvailableFactories">
            <summary>
            Gets a value indicating the list of <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> objects
            that describe each available factory in the current <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" />
            instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interfaces.IFactoryStorage.GetFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Determines which factories should be used
            for a particular service request.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <returns>A factory instance.</returns>
        </member>
        <member name="M:LinFu.IoC.Interfaces.IFactoryStorage.AddFactory(LinFu.IoC.Interfaces.IServiceInfo,LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds a <see cref="T:LinFu.IoC.Interfaces.IFactory" /> to the current <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> object.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.Interfaces.IFactoryStorage.ContainsFactory(LinFu.IoC.Interfaces.IServiceInfo)">
            <summary>
            Determines whether or not a factory exists in storage.
            </summary>
            <param name="serviceInfo">The <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> object that describes the target factory.</param>
            <returns>Returns <c>true</c> if the factory exists; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Interceptors.AroundInvokeAdapter">
            <summary>
            Adapts a <see cref="T:LinFu.AOP.Interfaces.IAroundInvoke" /> instance into an <see cref="T:LinFu.AOP.Interfaces.IInterceptor" />.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.AroundInvokeAdapter.#ctor(System.Func{System.Object},LinFu.IoC.Configuration.Interfaces.IMethodInvoke{System.Reflection.MethodInfo},LinFu.AOP.Interfaces.IAroundInvoke)">
            <summary>
            Initializes the <see cref="T:LinFu.IoC.Interceptors.AroundInvokeAdapter" /> class.
            </summary>
            <param name="getTarget">The functor responsible for obtaining the target instance.</param>
            <param name="methodInvoke">The method invoker.</param>
            <param name="aroundInvoke">The target <see cref="T:LinFu.AOP.Interfaces.IAroundInvoke" /> instance.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.AroundInvokeAdapter.Intercept(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Converts the call to <see cref="M:LinFu.AOP.Interfaces.IInterceptor.Intercept(LinFu.AOP.Interfaces.IInvocationInfo)" /> to an
            <see cref="T:LinFu.AOP.Interfaces.IAroundInvoke" /> method call.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> that describes the context of the method call.</param>
            <returns>The return value from the target method.</returns>
        </member>
        <member name="M:LinFu.IoC.Interceptors.AroundInvokeAdapter.GetTarget(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Gets the target object instance.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that describes the current execution context.</param>
        </member>
        <member name="T:LinFu.IoC.Interceptors.BaseInterceptor">
            <summary>
            A class that provides the most basic functionality for an interceptor.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.BaseInterceptor.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.BaseInterceptor.#ctor(LinFu.IoC.Configuration.Interfaces.IMethodInvoke{System.Reflection.MethodInfo})">
            <summary>
            Initializes the class with the <paramref name="methodInvoke" /> instance.
            </summary>
            <param name="methodInvoke">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodInvoke`1" /> instance that will invoke the target method.</param>
        </member>
        <member name="P:LinFu.IoC.Interceptors.BaseInterceptor.MethodInvoker">
            <summary>
            Gets the value indicating the <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodInvoke`1" /> instance
            that will be used to invoke the target method.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.BaseInterceptor.Intercept(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Intercepts a method call using the given
            <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that will
            contain all the necessary information associated with a
            particular method call.</param>
            <returns>The return value of the target method. If the return type of the target
            method is <see cref="!:void" />, then the return value will be ignored.</returns>
        </member>
        <member name="M:LinFu.IoC.Interceptors.BaseInterceptor.GetTarget(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Gets the target object instance.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that describes the current execution context.</param>
        </member>
        <member name="T:LinFu.IoC.Interceptors.InterceptorAttributeLoader">
            <summary>
            The class responsible for loading interceptors marked with the
            <see cref="T:LinFu.IoC.Interceptors.InterceptsAttribute" /> class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptorAttributeLoader.#ctor(LinFu.Reflection.ILoader{LinFu.IoC.Interfaces.IServiceContainer})">
            <summary>
            Initializes the class with the given <paramref name="loaderHost" />.
            </summary>
            <param name="loaderHost">The <see cref="T:LinFu.Reflection.ILoader`1" /> instance that will be responsible for loading the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance itself.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptorAttributeLoader.Load(System.Type)">
            <summary>
            Loads an <see cref="T:LinFu.AOP.Interfaces.IInterceptor" /> derived class into a particular <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance
            so that the current interceptor type can intercept calls made to services created from the given
            target container.
            </summary>
            <param name="input">The interceptor type.</param>
            <returns>By default, this will always return an empty set of container actions. The actual interceptor itself will be injected at the end of the postprocessor chain.</returns>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptorAttributeLoader.CanLoad(System.Type)">
            <summary>
            Determines whether or not a target type is an interceptor.
            </summary>
            <param name="inputType">The target type currently being tested.</param>
            <returns>Returns <c>true</c> if the <paramref name="inputType" /> is an interceptor; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptorAttributeLoader.CreateProxyFrom(LinFu.IoC.Interfaces.IServiceRequestResult,System.Func{LinFu.IoC.Interfaces.IServiceRequestResult,LinFu.AOP.Interfaces.IInterceptor})">
            <summary>
            Generates a proxy instance from an existing <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> instance.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> instance that describes the proxy type that must be generated.</param>
            <param name="getInterceptor">The <see cref="T:LinFu.AOP.Interfaces.IInterceptor" /> functor that will create the interceptor which will handle all calls made to the proxy instance.</param>
            <returns>A service proxy.</returns>
        </member>
        <member name="T:LinFu.IoC.Interceptors.InterceptsAttribute">
            <summary>
            The attribute class used to indentify interceptor classes.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptsAttribute.#ctor(System.Type)">
            <summary>
            Initializes the class with the given <paramref name="targetType" />.
            </summary>
            <param name="targetType">The target type that will be intercepted.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InterceptsAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes the class with the given <paramref name="targetType" /> and <paramref name="serviceName" />.
            </summary>
            <param name="serviceName">The name of service that will be intercepted.</param>
            <param name="targetType">The target type that will be intercepted.</param>
        </member>
        <member name="P:LinFu.IoC.Interceptors.InterceptsAttribute.ServiceName">
            <summary>
            Gets the value indicating the name of the service to intercept.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Interceptors.InterceptsAttribute.TargetType">
            <summary>
            Gets the value indicating the target type that will be intercepted.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Interceptors.InvocationInfoInterceptor">
            <summary>
            An interceptor that intercepts <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instances
            and replaces the original target instance with a surrogate instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InvocationInfoInterceptor.#ctor(LinFu.AOP.Interfaces.IInvocationInfo,System.Func{System.Object},LinFu.IoC.Configuration.Interfaces.IMethodInvoke{System.Reflection.MethodInfo})">
            <summary>
            Initializes the class with a functor that can provide the actual target instance.
            </summary>
            <param name="getActualTarget">The <see cref="T:System.Func`1" /> that will provide the target instance that will be used for the method invocation.</param>
            <param name="methodInvoke">The method invoker.</param>
            <param name="realInfo">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that describes the current execution context.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.InvocationInfoInterceptor.GetTarget(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Gets the target object instance.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that describes the current execution context.</param>
        </member>
        <member name="T:LinFu.IoC.Interceptors.ProxyContainerPlugin">
            <summary>
            A <see cref="T:LinFu.IoC.Configuration.Interfaces.IContainerPlugin" /> implementation that inserts
            <see cref="T:LinFu.IoC.Interceptors.ProxyInjector" /> instances at the beginning of a <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" />
            loading sequence.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.ProxyContainerPlugin.#ctor(LinFu.IoC.Interceptors.ProxyInjector)">
            <summary>
            Initializes the class with the given <see cref="T:LinFu.IoC.Interceptors.ProxyInjector" /> instance.
            </summary>
            <param name="injector">The postprocessor that will inject proxies in place of actual service requests.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.ProxyContainerPlugin.BeginLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Injects a <see cref="T:LinFu.IoC.Interceptors.ProxyInjector" /> into the <paramref name="target">target container</paramref>.
            </summary>
            <param name="target">The service container that will hold the <see cref="T:LinFu.IoC.Interceptors.ProxyInjector" />.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.ProxyContainerPlugin.EndLoad(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Does absolutely nothing.
            </summary>
            <param name="target">The target container.</param>
        </member>
        <member name="T:LinFu.IoC.Interceptors.ProxyInjector">
            <summary>
            Represents a class that automatically injects a proxy instance
            instead of an actual service instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.ProxyInjector.#ctor(System.Func{LinFu.IoC.Interfaces.IServiceRequestResult,System.Boolean},System.Func{LinFu.IoC.Interfaces.IServiceRequestResult,System.Object})">
            <summary>
            Initializes the class with the <paramref name="filterPredicate" />
            and the <paramref name="createProxy" /> factory method.
            </summary>
            <param name="filterPredicate">The predicate that will determine which service requests will be proxied.</param>
            <param name="createProxy">The factory method that will generate the proxy instance itself.</param>
        </member>
        <member name="M:LinFu.IoC.Interceptors.ProxyInjector.PostProcess(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            A method that injects service proxies in place of the actual <see cref="P:LinFu.IoC.Interfaces.IServiceRequestResult.ActualResult" />.
            </summary>
            <param name="result">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> instance that describes the service request.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IArgumentResolver">
            <summary>
            Represents a type that can generate method arguments
            from an existing <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IArgumentResolver.ResolveFrom(System.Collections.Generic.IEnumerable{LinFu.IoC.Configuration.Interfaces.INamedType},LinFu.IoC.Interfaces.IServiceContainer,System.Object[])">
            <summary>
            Generates constructor arguments from the given <paramref name="parameterTypes" />
            and <paramref name="container" />.
            </summary>
            <param name="parameterTypes">The parameter types for the target method.</param>
            <param name="container">The container that will provide the method arguments.</param>
            <param name="additionalArguments">The additional arguments that will be passed to the target method.</param>
            <returns>An array of objects that represent the arguments to be passed to the target method.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.IContainerLoader">
            <summary>
            Represents a loader that reads a file and converts it
            into an equivalent set of a set of <see cref="T:System.Action`1" />
            instances that can be applied to a particular
            instance of an <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> class.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IContainerPlugin">
            <summary>
            Represents an alias interface used for backward compatibility with LinFu IoC 1.0
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.IGenerateFactory`1">
            <summary>
            Represents a fluent class that allows
            users to create specific types of factories.
            </summary>
            <typeparam name="TService">The type of service being created.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.IGenerateFactory`1.AsSingleton">
            <summary>
            Creates a singleton factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.SingletonFactory`1" />
        </member>
        <member name="M:LinFu.IoC.Configuration.IGenerateFactory`1.OncePerThread">
            <summary>
            Creates a once per thread factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.OncePerThreadFactory`1" />
        </member>
        <member name="M:LinFu.IoC.Configuration.IGenerateFactory`1.OncePerRequest">
            <summary>
            Creates a once per request factory.
            </summary>
            <seealso cref="T:LinFu.IoC.Factories.OncePerRequestFactory`1" />
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMemberResolver`1">
            <summary>
            Represents a class that can choose a member that best matches
            the services currently available in a given <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.
            </summary>
            <typeparam name="TMember">The member type that will be searched.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IMemberResolver`1.ResolveFrom(System.Type,LinFu.IoC.Interfaces.IServiceContainer,LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Uses the <paramref name="container" /> to determine which member can be used to instantiate
            a <paramref name="concreteType">concrete type</paramref>.
            </summary>
            <param name="concreteType">The target type.</param>
            <param name="container">The container that contains the service instances that will be used to invoke the target member.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
            <returns>A <typeparamref name="TMember" /> instance if a match is found; otherwise, it will return <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMethodBuilder`1">
            <summary>
            Represents a class that is responsible for generating methods
            from other existing methods.
            </summary>
            <typeparam name="TMethod">The method type to generate.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IMethodBuilder`1.CreateMethod(`0)">
            <summary>
            Creates a method from the <paramref name="existingMethod" />.
            </summary>
            <param name="existingMethod">The method that will be used to define the new method.</param>
            <returns>A method based on the old method.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMethodFinder`1">
            <summary>
            Represents a class that determines which method best matches the
            services currently in the target container.
            </summary>
            <typeparam name="T">The method type to search.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IMethodFinder`1.GetBestMatch(System.Collections.Generic.IEnumerable{`0},LinFu.IoC.Configuration.Interfaces.IMethodFinderContext)">
            <summary>
            Determines which method best matches the
            services currently in the target container.
            </summary>
            <param name="items">The list of methods to search.</param>
            <param name="finderContext">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
            <returns>Returns the method with the most resolvable parameters from the target <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1">
            <summary>
            An interface responsible for determining which methods
            should be injected.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IMemberInjectionFilter`1.GetInjectableMembers(System.Type)">
            <summary>
            Returns the list of <see cref="T:System.Reflection.MethodBase" /> objects
            that will be injected with arbitrary values.
            </summary>
            <param name="targetType">The target type that contains the target methods.</param>
            <returns>A set of methods that describe which methods that will injected.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IMethodInvoke`1">
            <summary>
            Represents a type that can invoke a method
            using a given set of method arguments.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IMethodInvoke`1.Invoke(System.Object,`0,System.Object[])">
            <summary>
            Invokes the <paramref name="targetMethod" />
            using the given <paramref name="arguments" />.
            </summary>
            <param name="target">The target object instance.</param>
            <param name="targetMethod">The target method to invoke.</param>
            <param name="arguments">The arguments to be used with the method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IPropertyInjectionLambda`1">
            <summary>
            Represents a fluent class that creates
            a method that initializes a <typeparamref name="TService" />
            instance.
            </summary>
            <typeparam name="TService">The service type being instantiated.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IPropertyInjectionLambda`1.With(System.Action{`0})">
            <summary>
            Initializes service instances with the given
            <paramref name="action" />.
            </summary>
            <param name="action">An <see cref="T:System.Action`1" /> delegate that will be used to initialize newly created services.</param>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IPropertyInjectionLambda`1.With(System.Action{LinFu.IoC.Interfaces.IServiceContainer,`0})">
            <summary>
            Uses an action delegate to initialize a given service using
            the given <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> and <typeparamref name="TService" />
            instances.
            </summary>
            <param name="action">An <see cref="T:System.Func`2" /> delegate that will be used to initialize newly created services.</param>
        </member>
        <member name="T:LinFu.IoC.Configuration.Interfaces.IPropertySetter">
            <summary>
            A class responsible for setting property values.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Configuration.Interfaces.IPropertySetter.Set(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the value of the <paramref name="targetProperty" />.
            </summary>
            /// <param name="target">The target instance that contains the property to be modified.</param><param name="targetProperty">The property that will store the given value.</param><param name="value">The value that will be assigned to the property.</param></member>
        <member name="T:LinFu.IoC.Configuration.ITypeLoader">
            <summary>
            Generates one or more <see cref="T:System.Action`1" /> instances
            from a given source type so that it can be used
            against an <see cref="T:LinFu.IoC.Interfaces.IContainer" /> instance.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Configuration.IUsingLambda`1">
            <summary>
            Represents a fluent class that creates
            a factory method that will be used
            in instantiating a specific service instance.
            </summary>
            <typeparam name="TService">The service type being instantiated.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Configuration.IUsingLambda`1.Using``1">
            <summary>
            Creates a service instance using the
            concrete <typeparamref name="TConcrete" /> type
            as the implementation for the <typeparamref name="TService" />
            type.
            </summary>
            <typeparam name="TConcrete">The concrete implementation that implements <typeparamref name="TService" />. This class must have a default constructor.</typeparam>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.IUsingLambda`1.Using(System.Func{LinFu.IoC.Interfaces.IServiceContainer,System.Object[],`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <seealso cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" />
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.IUsingLambda`1.Using(System.Func{LinFu.IoC.Interfaces.IServiceContainer,`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <seealso cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" />
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="M:LinFu.IoC.Configuration.IUsingLambda`1.Using(System.Func{`0})">
            <summary>
            Creates a service instance using the
            <paramref name="factoryMethod" /> to
            instantiate the service instance
            with a particular factory type.
            </summary>
            <param name="factoryMethod">The factory method that will be used to instantiate the actual service instance.</param>
            <returns>A non-null <see cref="T:LinFu.IoC.Configuration.IGenerateFactory`1" /> instance that will be used to create a factory and add it to a specific container.</returns>
        </member>
        <member name="T:LinFu.IoC.Interceptors.Redirector">
            <summary>
            An interceptor class that redirects calls to another interceptor.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interceptors.Redirector.GetTarget(LinFu.AOP.Interfaces.IInvocationInfo)">
            <summary>
            Gets the target object instance.
            </summary>
            <param name="info">The <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance that describes the current execution context.</param>
        </member>
        <member name="T:LinFu.IoC.Interfaces.IFactory`1">
            <summary>
            A strongly-typed version of <see cref="T:LinFu.IoC.Interfaces.IFactory" />. Allows users
            to create their own service instances
            </summary>
            <typeparam name="T">The instance type that can be created by this factory.</typeparam>
        </member>
        <member name="M:LinFu.IoC.Interfaces.IFactory`1.CreateInstance(LinFu.IoC.Interfaces.IFactoryRequest)">
            <summary>
            Creates a service instance using the given <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance.
            </summary>
            <param name="request">The <see cref="T:LinFu.IoC.Interfaces.IFactoryRequest" /> instance that describes the requested service.</param>
            <returns>An object instance that represents the service to be created. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.Interfaces.IGetService">
            <summary>
            Represents a class that determines the behavior a <see cref="T:LinFu.IoC.ServiceContainer" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Interfaces.IGetService.GetService(LinFu.IoC.Interfaces.IServiceRequest)">
            <summary>
            Causes the container to instantiate the service using the given
            <paramref name="serviceRequest">service request</paramref>. If the service type cannot be created, it will simply return null.
            </summary>
            <returns>A valid object reference if the service can be created; otherwise, it will return <c>null</c></returns>
        </member>
        <member name="T:LinFu.IoC.Interfaces.IScope">
            <summary>
            Represents a class that keeps track of all the disposable objects
            created within a service container and disposes them when
            the scope itself has been disposed.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Interfaces.IServiceInstance">
            <summary>
            A type that represents a service instance returned by a container.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Interfaces.IServiceInstance.ServiceInfo">
            <summary>
            Gets the value indicating the <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> instance
            that describes the service instance itself.
            </summary>
        </member>
        <member name="P:LinFu.IoC.Interfaces.IServiceInstance.Object">
            <summary>
            Gets the value indicating the service instance itself.
            </summary>
        </member>
        <member name="T:LinFu.IoC.Reflection.LateBoundExtensions">
            <summary>
            A class that adds late binding support to any CLR object.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" />.
            </summary>
            <param name="instance">The target instance that will be used to invoke the method.</param>
            <param name="methodName">The name of the target method.</param>
            <param name="arguments">The arguments that will be passed to the target method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke(System.Object,System.String,LinFu.IoC.Configuration.MethodFinderContext)">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" /> and <paramref name="context" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <param name="context">The <see cref="T:LinFu.IoC.Configuration.Interfaces.IMethodFinderContext" /> that describes the target method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <typeparam name="T1">The type argument that will be passed to the target method</typeparam>.
            <param name="arguments">The arguments that will be passed to the target method.</param><returns>The method return value.</returns></member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke``2(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <typeparam name="T1">The first type argument that will be passed to the target method</typeparam>.
            <typeparam name="T2">The second type argument that will be passed to the target method</typeparam>.
            <param name="arguments">The arguments that will be passed to the target method.</param><returns>The method return value.</returns></member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke``3(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <typeparam name="T1">The first type argument that will be passed to the target method</typeparam>.
            <typeparam name="T2">The second type argument that will be passed to the target method</typeparam>.
            <typeparam name="T3">The third type argument that will be passed to the target method.</typeparam><param name="arguments">The arguments that will be passed to the target method.</param><returns>The method return value.</returns></member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke``4(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <typeparam name="T1">The first type argument that will be passed to the target method</typeparam>.
            <typeparam name="T2">The second type argument that will be passed to the target method</typeparam>.
            <typeparam name="T3">The third type argument that will be passed to the target method.</typeparam><typeparam name="T4">The fourth type argument that will be passed to the target method.</typeparam><param name="arguments">The arguments that will be passed to the target method.</param><returns>The method return value.</returns></member>
        <member name="M:LinFu.IoC.Reflection.LateBoundExtensions.Invoke(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes a method on the target <paramref name="instance" /> using the given <paramref name="methodName" />.
            </summary>
            <param name="instance">The target instance.</param>
            <param name="methodName">The name of the target method.</param>
            <param name="typeArguments">The type arguments that will be passed to the target method.</param>
            <param name="arguments">The arguments that will be passed to the target method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="T:LinFu.IoC.Scope">
            <summary>
            Represents a class that keeps track of all the disposable objects
            created within a service container and disposes them when
            the scope itself has been disposed.
            </summary>
        </member>
        <member name="M:LinFu.IoC.Scope.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Inserts the scope into the target <paramref name="source">container</paramref>.
            </summary>
            <param name="source">The container that will hold the scope instance.</param>
        </member>
        <member name="M:LinFu.IoC.Scope.PostProcess(LinFu.IoC.Interfaces.IServiceRequestResult)">
            <summary>
            Monitors the <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> for any services that are created and automatically disposes them
            once the <see cref="T:LinFu.IoC.Interfaces.IScope" /> is disposed.
            </summary>
            <param name="result">The <see cref="T:LinFu.IoC.Interfaces.IServiceRequestResult" /> that describes the service being instantiated.</param>
        </member>
        <member name="M:LinFu.IoC.Scope.Dispose">
            <summary>
            Disposes the services that have been created while the scope has been active.
            </summary>
        </member>
        <member name="T:LinFu.IoC.ServiceContainer">
            <summary>
            Represents a service container with additional
            extension points for customizing service instances
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.#ctor">
            <summary>
            Initializes the container with the default services.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.#ctor(LinFu.IoC.Interfaces.IGetService,LinFu.IoC.Interfaces.IFactoryStorage)">
            <summary>
            Initializes the container with a custom <see cref="T:LinFu.IoC.Interfaces.ICreateInstance" /> type.
            </summary>
            <param name="getServiceBehavior">The instance that will be responsible for generating service instances.</param>
            <param name="factoryStorage">The <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> instance responsible for determining which factory instance will instantiate a given service request.</param>
        </member>
        <member name="P:LinFu.IoC.ServiceContainer.FactoryStorage">
            <summary>
            Gets the value indicating the <see cref="T:LinFu.IoC.Interfaces.IFactoryStorage" /> instance
            that will be used to store each <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceContainer.SuppressErrors">
            <summary>
            Gets or sets a <see cref="T:System.Boolean">System.Boolean</see> value
            that determines whether or not the container should throw
            a <see cref="T:LinFu.IoC.ServiceNotFoundException" /> if a requested service
            cannot be found or created.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.AddFactory(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type},LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it
            with the given <paramref name="serviceType">service type</paramref> and
            <paramref name="serviceName">service name</paramref>.
            </summary>
            <param name="serviceName">The name of the service to associate with the given <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</param>
            <param name="serviceType">The type of service that the factory will be able to create.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will create the object instance.</param>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.AddFactory(System.Type,System.Collections.Generic.IEnumerable{System.Type},LinFu.IoC.Interfaces.IFactory)">
            <summary>
            Adds an <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance and associates it
            with the given <paramref name="serviceType">service type</paramref>.
            </summary>
            <param name="serviceType">The service type to associate with the factory</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <param name="factory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be responsible for creating the service instance</param>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.Contains(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether or not the given <paramref name="serviceType" />
            can be instantiated by the container.
            </summary>
            <param name="serviceType">The type of service to instantiate.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <returns>Returns <c>true</c> if the service exists; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.GetService(System.Type,System.Object[])">
            <summary>
            Overridden. Causes the container to instantiate the service with the given
            <paramref name="serviceType">service type</paramref>. If the service type cannot be created, then an
            exception will be thrown if the <see cref="P:LinFu.IoC.Interfaces.IContainer.SuppressErrors" /> property
            is set to false. Otherwise, it will simply return null.
            </summary>
            <remarks>
            This overload of the <c>GetService</c> method has been overridden
            so that its results can be handled by the postprocessors.
            </remarks>
            <seealso cref="T:LinFu.IoC.Interfaces.IPostProcessor" />
            <param name="serviceType">The service type to instantiate.</param>
            <param name="additionalArguments">The additional arguments that will be used to instantiate the service type.</param>
            <returns>If successful, it will return a service instance that is compatible with the given type;
            otherwise, it will just return a null value.</returns>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.GetService(System.String,System.Type,System.Object[])">
            <summary>
            Causes the container to instantiate the service with the given
            <paramref name="serviceType">service type</paramref>. If the service type cannot be created, then an
            exception will be thrown if the <see cref="P:LinFu.IoC.Interfaces.IContainer.SuppressErrors" /> property
            is set to false. Otherwise, it will simply return null.
            </summary>
            <param name="serviceName">The name of the service to instantiate.</param>
            <param name="serviceType">The service type to instantiate.</param>
            <param name="additionalArguments">The additional arguments that will be used to instantiate the service type.</param>
            <returns>If successful, it will return a service instance that is compatible with the given type;
            otherwise, it will just return a <c>null</c> value.</returns>
        </member>
        <member name="M:LinFu.IoC.ServiceContainer.Contains(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether or not a service can be created using
            the given <paramref name="serviceName">service name</paramref>
            and <paramref name="serviceType">service type</paramref>.
            </summary>
            <param name="serviceName">The name of the service to associate with the given <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance.</param>
            <param name="serviceType">The type of service that the factory will be able to create.</param>
            <param name="additionalParameterTypes">The list of additional parameters that this factory type will support.</param>
            <returns>Returns <c>true</c> if the service exists; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="P:LinFu.IoC.ServiceContainer.PostProcessors">
            <summary>
            The list of postprocessors that will handle every
            service request result.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceContainer.PreProcessors">
            <summary>
            The list of preprocessors that will handle
            every service request before each actual service is created.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceContainer.AvailableServices">
            <summary>
            The list of services currently available inside the container.
            </summary>
        </member>
        <member name="T:LinFu.IoC.NamedServiceNotFoundException">
            <summary>
            The exception thrown when a service name and a service type is
            requested from a named container and that named container
            is unable to find or create that particular service instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.NamedServiceNotFoundException.#ctor(System.String,System.Type)">
            <summary>
            Initializes the service exception using the
            given <paramref name="serviceType" /> as
            the service that was not found.
            </summary>
            <param name="serviceType">The service type being requested.</param>
            <param name="serviceName">The name of the service being requested.</param>
        </member>
        <member name="P:LinFu.IoC.NamedServiceNotFoundException.Message">
            <summary>
            The error message that this particular exception
            will display.
            </summary>
        </member>
        <member name="T:LinFu.IoC.ServiceInfo">
            <summary>
            Represents the default implementation of the ServiceInfo class.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes the class with the given <paramref name="serviceName" />
            and <paramref name="serviceType" />.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="serviceType">The type of service that can be created.</param>
        </member>
        <member name="M:LinFu.IoC.ServiceInfo.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the class with the given <paramref name="serviceName" />
            and <paramref name="serviceType" />.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="serviceType">The type of service that can be created.</param>
            <param name="arguments">The parameter types required by the given service.</param>
        </member>
        <member name="P:LinFu.IoC.ServiceInfo.ServiceName">
            <summary>
            The name of the service being created. By default, this property is blank.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceInfo.ServiceType">
            <summary>
            The type of service being requested.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceInfo.ArgumentTypes">
            <summary>
            Gets a value indicating the list of arguments required by this particular service.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceInfo.ToString">
            <summary>
            Displays the name of the current service and the current service type.
            </summary>
            <returns>The name of the current service and the current service type.</returns>
        </member>
        <member name="M:LinFu.IoC.ServiceInfo.Equals(System.Object)">
            <summary>
            Determines if the other object is equal to the current <see cref="T:LinFu.IoC.Interfaces.IServiceInfo" /> instance.
            </summary>
            <param name="obj">The other object that will be used in the comparison.</param>
            <returns>Returns <c>true</c> if both instances have the same service name, implement the same service type and have the same arguments; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="T:LinFu.IoC.ServiceNotFoundException">
            <summary>
            The exception thrown when a service type is
            requested from a container and that named container
            is unable to find or create that particular service instance.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes the service exception using the
            given <paramref name="serviceType" /> as
            the service that was not found.
            </summary>
            <param name="serviceType">The service type being requested.</param>
        </member>
        <member name="P:LinFu.IoC.ServiceNotFoundException.Message">
            <summary>
            The error message that this particular exception
            will display.
            </summary>
        </member>
        <member name="T:LinFu.IoC.ServiceRequest">
            <summary>
            Reprsents the default implementation of the <see cref="T:LinFu.IoC.Interfaces.IServiceRequest" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.IoC.ServiceRequest.#ctor(System.String,System.Type,System.Object[],LinFu.IoC.Interfaces.IFactory,LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the <see cref="T:LinFu.IoC.ServiceRequest" /> class.
            </summary>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceType">The requested service type.</param>
            <param name="proposedArguments">The proposed set of arguments that will be given to the factory.</param>
            <param name="proposedFactory">The <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance that will be used to handle the service request.</param>
            <param name="container">The host container.</param>
        </member>
        <member name="P:LinFu.IoC.ServiceRequest.ProposedArguments">
            <summary>
            Gets the value indicating the original arguments that
            were given during the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequest.ProposedFactory">
            <summary>
            Gets the value indicating the original <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance
            that will be used to handle the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequest.Container">
            <summary>
            The container that will handle the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequest.ActualArguments">
            <summary>
            Gets or sets the value indicating the actual arguments that
            will be used for the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequest.ActualFactory">
            <summary>
            Gets or sets the value indicating the actual <see cref="T:LinFu.IoC.Interfaces.IFactory" /> instance
            that will be used to handle the service request.
            </summary>
        </member>
        <member name="T:LinFu.IoC.ServiceRequestResult">
            <summary>
            Represents the results returned when a service request
            is made against an <see cref="T:LinFu.IoC.Interfaces.IContainer" /> instance.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.ServiceName">
            <summary>
            The name of the service being created. By default, this property is blank.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.OriginalResult">
            <summary>
            The raw object reference created by the container itself.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.ActualResult">
            <summary>
            The result that will be returned from the container
            instead of the <see cref="P:LinFu.IoC.ServiceRequestResult.OriginalResult" />.
            If this property is null, then the original result will be used.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.ServiceType">
            <summary>
            The type of service being requested.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.Container">
            <summary>
            The container that will handle the service request.
            </summary>
        </member>
        <member name="P:LinFu.IoC.ServiceRequestResult.AdditionalArguments">
            <summary>
            Gets or sets the value indicating the additional arguments that
            were used during the service request.
            </summary>
        </member>
    </members>
</doc>
