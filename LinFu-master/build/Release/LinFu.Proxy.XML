<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFu.Proxy</name>
    </assembly>
    <members>
        <member name="T:LinFu.Proxy.MethodBodyEmitter">
            <summary>
            Provides the default implementation for the
            <see cref="T:LinFu.Proxy.Interfaces.IMethodBodyEmitter" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.#ctor">
            <summary>
            Initializes the class with the default values.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.MethodBodyEmitter.InvocationInfoEmitter">
            <summary>
            The <see cref="T:LinFu.AOP.Cecil.Interfaces.IEmitInvocationInfo" /> instance that
            </summary>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the MethodBodyEmitter class.
            </summary>
            <param name="source">
            </param>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.Emit(System.Reflection.MethodInfo,Mono.Cecil.MethodDefinition)">
            <summary>
            Generates a method body for the <paramref name="targetMethod" />.
            </summary>
            <param name="originalMethod">The method currently being intercepted.</param>
            <param name="targetMethod">The target method that will contain the new method body.</param>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.EmitGetInterceptorInstruction(Mono.Cecil.Cil.CilWorker,Mono.Cecil.TypeReference,Mono.Cecil.MethodReference)">
            <summary>
            Emits the IL instructions to obtain an <see cref="T:LinFu.AOP.Interfaces.IInterceptor" /> instance for the proxy type.
            </summary>
            <param name="IL">The <see cref="T:Mono.Cecil.Cil.CilWorker" /> responsible for emitting the method body.</param>
            <param name="proxyType">The proxy type.</param>
            <param name="getInterceptorMethod">The getter method for the interceptor.</param>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.ImplementNotFound(Mono.Cecil.Cil.CilWorker)">
            <summary>
            Causes the <see cref="T:Mono.Cecil.Cil.CilWorker" /> to make the method throw a
            <see cref="T:System.NotImplementedException" /> if the method cannot be found.
            </summary>
            <param name="IL">The <see cref="T:Mono.Cecil.Cil.CilWorker" /> responsible for emitting the method body.</param>
        </member>
        <member name="M:LinFu.Proxy.MethodBodyEmitter.SaveRefArguments(Mono.Cecil.Cil.CilWorker,System.Collections.Generic.IEnumerable{Mono.Cecil.ParameterDefinition},Mono.Cecil.Cil.VariableDefinition,Mono.Cecil.Cil.VariableDefinition)">
            <summary>
            Saves the ref arguments of a given method using the
            <paramref name="arguments" /> from the <paramref name="invocationInfo" />
            object.
            </summary>
            <param name="IL">The <see cref="T:Mono.Cecil.Cil.CilWorker" /> that will emit the method body.</param>
            <param name="parameters">The parameters of the target method.</param>
            <param name="invocationInfo">The local variable that contains the <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance.</param>
            <param name="arguments">The local variable that will store the arguments from the <see cref="T:LinFu.AOP.Interfaces.IInvocationInfo" /> instance.</param>
        </member>
        <member name="T:LinFu.Proxy.ProxyBuilder">
            <summary>
            A <see cref="T:LinFu.Proxy.Interfaces.IProxyBuilder" /> type that generates
            proxies that forward all virtual method calls to a
            single interceptor.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyBuilder.#ctor">
            <summary>
            Initializes the current class with the default values.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyBuilder.ProxyImplementor">
            <summary>
            Gets or sets the <see cref="T:LinFu.Reflection.Emit.Interfaces.ITypeBuilder" /> interface
            which will emit the actual implementation of the IProxy interface.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyBuilder.MethodPicker">
            <summary>
            Gets or sets the <see cref="T:LinFu.Proxy.Interfaces.IMethodPicker" />
            instance that will determine which methods
            will be proxied by the proxy builder.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyBuilder.ProxyMethodBuilder">
            <summary>
            The <see cref="T:LinFu.Proxy.Interfaces.IMethodBuilder" /> instance
            that will be responsible for generating each method
            for the current target type.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyBuilder.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the current instance
            with the <paramref name="source" /> container.
            </summary>
            <param name="source">The <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance that will hold the current instance.</param>
        </member>
        <member name="M:LinFu.Proxy.ProxyBuilder.Construct(System.Type,System.Collections.Generic.IEnumerable{System.Type},Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeDefinition)">
            <summary>
            Generates a proxy that forwards all virtual method calls
            to a single <see cref="T:LinFu.AOP.Interfaces.IInterceptor" /> instance.
            </summary>
            <param name="originalBaseType">The base class of the type being constructed.</param>
            <param name="baseInterfaces">The list of interfaces that the new type must implement.</param>
            <param name="module">The module that will hold the brand new type.</param>
            <param name="targetType">The <see cref="T:Mono.Cecil.TypeDefinition" /> that represents the type to be created.</param>
        </member>
        <member name="T:LinFu.Proxy.InterfaceExtractor">
            <summary>
            Provides the default implementation for the
            <see cref="T:LinFu.Proxy.Interfaces.IExtractInterfaces" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.InterfaceExtractor.GetInterfaces(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Determines which interfaces a given type should implement.
            </summary>
            <param name="currentType">The base type that holds the list of interfaces to implement.</param>
            <param name="interfaceList">The list of interfaces already being implemented. </param>
        </member>
        <member name="T:LinFu.Proxy.MethodPicker">
            <summary>
            Represents the default class implementation for the
            <see cref="T:LinFu.Proxy.Interfaces.IMethodPicker" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.MethodPicker.ChooseProxyMethodsFrom(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines which methods can be proxied from
            the given <paramref name="baseType" /> and <paramref name="baseInterfaces" />.
            </summary>
            <remarks>By default, only public virtual methods will be proxied.</remarks>
            <param name="baseType">The base class of the proxy type currently being generated.</param>
            <param name="baseInterfaces">The list of interfaces that the proxy must implement.</param>
            <returns>A list of <see cref="T:System.Reflection.MethodInfo" /> objects that can be proxied.</returns>
        </member>
        <member name="T:LinFu.Proxy.ProxyCache">
            <summary>
            Represents the default implementation of the <see cref="T:LinFu.Proxy.Interfaces.IProxyCache" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyCache.Contains(System.Type,System.Type[])">
            <summary>
            Determines whether or not the cache contains an existing proxy type
            that is derived from the <paramref name="baseType" /> and implements
            the given <paramref name="baseInterfaces" />.
            </summary>
            <param name="baseType">The base type of the dynamically-generated proxy type.</param>
            <param name="baseInterfaces">The list of interfaces that the generated proxy type must implement.</param>
            <returns>Returns <c>true</c> if the proxy type already exists; otherwise, it will return <c>false.</c></returns>
        </member>
        <member name="M:LinFu.Proxy.ProxyCache.Get(System.Type,System.Type[])">
            <summary>
            Retrieves an existing proxy type from the cache.
            </summary>
            <param name="baseType">The base type of the dynamically-generated proxy type.</param>
            <param name="baseInterfaces">The list of interfaces that the generated proxy type must implement.</param>
            <returns>Returns a valid <see cref="T:System.Type" /> if the type already exists; otherwise, it might return <c>null</c> or opt to throw an exception.</returns>
        </member>
        <member name="M:LinFu.Proxy.ProxyCache.Store(System.Type,System.Type,System.Type[])">
            <summary>
            Stores a proxy type in the cache.
            </summary>
            <param name="result">The proxy type to be stored.</param>
            <param name="baseType">The base type of the dynamically-generated proxy type.</param>
            <param name="baseInterfaces">The list of interfaces that the generated proxy type must implement.</param>
        </member>
        <member name="T:LinFu.Proxy.ProxyCacheEntry">
            <summary>
            Represents a cached proxy type.
            </summary>
        </member>
        <member name="T:LinFu.Proxy.ProxyFactory">
            <summary>
            Provides the basic implementation for a proxy factory class.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyFactory.#ctor">
            <summary>
            Initializes the proxy factory with the default values.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyFactory.InterfaceExtractor">
            <summary>
            Gets or sets the <see cref="T:LinFu.Proxy.Interfaces.IExtractInterfaces" /> type that will be
            responsible for determining which interfaces
            the proxy type should implement.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyFactory.ProxyBuilder">
            <summary>
            The <see cref="T:LinFu.Proxy.Interfaces.IProxyBuilder" /> instance that is
            responsible for generating the proxy type.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyFactory.Verifier">
            <summary>
            The <see cref="T:LinFu.AOP.Cecil.Interfaces.IVerifier" /> instance that will be used to
            ensure that the generated assemblies are valid.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyFactory.Cache">
            <summary>
            Gets or sets a value indicating the <see cref="T:LinFu.Proxy.Interfaces.IProxyCache" />
            instance that will be used to cache previous proxy generation runs.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyFactory.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the <see cref="T:LinFu.Proxy.ProxyFactory" /> instance
            with the <paramref name="source" /> container.
            </summary>
            <param name="source">The <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance that will hold the ProxyFactory.</param>
        </member>
        <member name="M:LinFu.Proxy.ProxyFactory.CreateProxyType(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a proxy type using the given
            <paramref name="baseType" /> as the base class
            and ensures that the proxy type implements the given
            interface types.
            </summary>
            <param name="baseType">The base class from which the proxy type will be derived.</param>
            <param name="baseInterfaces">The list of interfaces that the proxy will implement.</param>
            <returns>A forwarding proxy.</returns>
        </member>
        <member name="T:LinFu.Proxy.ProxyImplementor">
            <summary>
            A class that provides the default implementation
            for the IProxy interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyImplementor.Construct(Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeDefinition)">
            <summary>
            Constructs a type that implements the
            <see cref="T:LinFu.Proxy.Interfaces.IProxy" /> interface.
            </summary>
            <param name="module">The module that will hold the target type.</param>
            <param name="targetType">The type that will implement the <see cref="T:LinFu.Proxy.Interfaces.IProxy" /> interface.</param>
        </member>
        <member name="T:LinFu.Proxy.ProxyMethodBuilder">
            <summary>
            Represents the default implementation of the
            <see cref="T:LinFu.Proxy.Interfaces.IMethodBuilder" /> interface.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyMethodBuilder.#ctor">
            <summary>
            Initializes the <see cref="T:LinFu.Proxy.ProxyMethodBuilder" /> class with the default property values.
            </summary>
        </member>
        <member name="P:LinFu.Proxy.ProxyMethodBuilder.Emitter">
            <summary>
            The <see cref="T:LinFu.Proxy.Interfaces.IMethodBodyEmitter" /> instance that will be
            responsible for generating the method body.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyMethodBuilder.Initialize(LinFu.IoC.Interfaces.IServiceContainer)">
            <summary>
            Initializes the class with the <paramref name="source" /> container.
            </summary>
            <param name="source">The <see cref="T:LinFu.IoC.Interfaces.IServiceContainer" /> instance that will create the class instance.</param>
        </member>
        <member name="M:LinFu.Proxy.ProxyMethodBuilder.CreateMethod(Mono.Cecil.TypeDefinition,System.Reflection.MethodInfo)">
            <summary>
            Creates a method that matches the signature defined in the
            <paramref name="method" /> parameter.
            </summary>
            <param name="targetType">The type that will host the new method.</param>
            <param name="method">The method from which the signature will be derived.</param>
        </member>
        <member name="M:LinFu.Proxy.ProxyMethodBuilder.MatchGenericArguments(Mono.Cecil.MethodDefinition,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Matches the generic parameters of <paramref name="newMethod">a target method</paramref></summary>
            <param name="newMethod">The generic method that contains the generic type arguments.</param>
            <param name="typeArguments">The array of <see cref="T:System.Type" /> objects that describe the generic parameters for the current method.</param>
        </member>
        <member name="T:LinFu.Proxy.ProxyObjectReference">
            <summary>
            Represents a helper class that deserializes proxy instances.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.ProxyObjectReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ProxyObjectReference class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class that contains the serialized data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that describes the serialization state.</param>
        </member>
        <member name="M:LinFu.Proxy.ProxyObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the deserialized proxy instance.
            </summary>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that describes the serialization state.</param>
            <returns>
            </returns>
        </member>
        <member name="M:LinFu.Proxy.ProxyObjectReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the proxy to a stream.
            </summary>
            <remarks>This method override does nothing.</remarks>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class that contains the serialized data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that describes the serialization state.</param>
        </member>
        <member name="T:LinFu.Proxy.SerializableProxyBuilder">
            <summary>
            Represents a <see cref="T:LinFu.Proxy.ProxyBuilder" /> type that can create serializable proxy types.
            </summary>
        </member>
        <member name="M:LinFu.Proxy.SerializableProxyBuilder.Construct(System.Type,System.Collections.Generic.IEnumerable{System.Type},Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeDefinition)">
            <summary>
            Generates a proxy that forwards all virtual method calls
            to a single <see cref="T:LinFu.AOP.Interfaces.IInterceptor" /> instance.
            </summary>
            <param name="originalBaseType">The base class of the type being constructed.</param>
            <param name="baseInterfaces">The list of interfaces that the new type must implement.</param>
            <param name="module">The module that will hold the brand new type.</param>
            <param name="targetType">The <see cref="T:Mono.Cecil.TypeDefinition" /> that represents the type to be created.</param>
        </member>
    </members>
</doc>
