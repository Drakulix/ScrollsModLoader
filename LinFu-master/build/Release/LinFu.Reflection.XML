<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFu.Reflection</name>
    </assembly>
    <members>
        <member name="T:LinFu.Reflection.AssemblyActionLoader`3">
            <summary>
            A class that reads an assembly and converts it into a set of actions
            that can be used to build the list of actions against the <typeparamref name="TTarget" />
            type.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <typeparam name="TAssembly">The assembly type.</typeparam>
            <typeparam name="TType">The target input type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`3.#ctor(System.Func{System.Collections.Generic.IList{LinFu.Reflection.IActionLoader{`0,`2}}},LinFu.Reflection.ITypeExtractor{`1,`2})">
            <summary>
            Initializes the class with a set of <see cref="T:LinFu.Reflection.IActionLoader`2" />
            instances that will be used to load the target assembly.
            </summary>
            <param name="getTypeLoaders">The delegate that will return the actual list of typeloaders.</param>
            <param name="typeExtractor">The type extractor that will be responsible for pulling the types out of the current assembly.</param>
        </member>
        <member name="P:LinFu.Reflection.AssemblyActionLoader`3.TypeExtractor">
            <summary>
            The <see cref="T:LinFu.Reflection.ITypeExtractor" /> instance that will
            determine which types will be extracted from an assembly.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`3.Load(`1)">
            <summary>
            Loads the target assembly and creates an action that can
            create the list of actions which will modify the <typeparamref name="TTarget" /> instance.
            </summary>
            <param name="input">The target assembly.</param>
            <returns>The list of actions which will modify the list of actions that will be executed against the <typeparamref name="TTarget" /> instance.</returns>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`3.CanLoad(`1)">
            <summary>
            Determines if an assembly can be loaded.
            </summary>
            <param name="assembly">The target assembly.</param>
            <returns>Returns <c>true</c> if the assembly is not <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`3.CreateActionsFrom(`1,System.Collections.Generic.ICollection{System.Action{`0}})">
            <summary>
            Generates a list of actions from a target assemby.
            </summary>
            <param name="assembly">The target assembly.</param>
            <param name="resultList">The list that will store the resulting actions.</param>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`3.LoadResultsFromType(`2,System.Collections.Generic.ICollection{System.Action{`0}})">
            <summary>
            Generates the list of <see cref="T:System.Action`1" />
            instances which will be used to configure a target instance.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> instance that holds the configuration information.</param>
            <param name="results">The list that will hold the actions which will configure the container.</param>
        </member>
        <member name="T:LinFu.Reflection.AssemblyActionLoader`1">
            <summary>
            A class that reads an assembly and converts it into a set of actions
            that can be used to build the list of actions against the <typeparamref name="TTarget" />
            type.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.AssemblyActionLoader`1.#ctor(System.Func{System.Collections.Generic.IList{LinFu.Reflection.IActionLoader{`0,System.Type}}})">
            <summary>
            Initializes the class with a set of <see cref="T:LinFu.Reflection.IActionLoader`2" />
            instances that will be used to load the target assembly.
            </summary>
            <param name="getTypeLoaders">The delegate that will return the actual list of typeloaders.</param>
        </member>
        <member name="T:LinFu.Reflection.AssemblyLoader">
            <summary>
            Represents a class that loads assemblies into memory
            from disk.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.AssemblyLoader.Load(System.String)">
            <summary>
            Loads the target assembly into memory.
            </summary>
            <param name="assemblyFile">The full path and filename of the assembly to load.</param>
            <returns>A loaded <see cref="T:System.Reflection.Assembly" /> instance.</returns>
        </member>
        <member name="T:LinFu.Reflection.AssemblyTargetLoader`3">
            <summary>
            Represents a loader class that takes <see cref="T:System.Type" />
            instances as input and generates <see cref="T:System.Action`1" />
            instances that can be used to configure a <typeparamref name="TTarget" />
            instance.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
            <typeparam name="TAssembly">The assembly type.</typeparam>
            <typeparam name="TType">The target type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.AssemblyTargetLoader`3.#ctor(LinFu.Reflection.ITypeExtractor{`1,`2},LinFu.Reflection.IAssemblyLoader{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.Reflection.AssemblyTargetLoader`3" /> class.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.AssemblyTargetLoader`3.AssemblyActionLoader">
            <summary>
            Gets or sets the value indicating the action loader
            responsible for reading an assembly and converts it to
            a list of actions to be performed against the target type.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.AssemblyTargetLoader`3.AssemblyLoader">
            <summary>
            The <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance that will load
            the target assemblies.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.AssemblyTargetLoader`3.TypeLoaders">
            <summary>
            The list of ActionLoaders that will be used to
            configure the target.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.AssemblyTargetLoader`3.CanLoad(System.String)">
            <summary>
            Determines whether or not the current type loader
            instance can load the current file type.
            </summary>
            <remarks>
            This class only loads assemblies with the ".dll" extension.
            </remarks>
            <param name="filename">The filename and full path of the target file.</param>
            <returns>Returns <c>true</c> if the file can be loaded; otherwise, the result is <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.AssemblyTargetLoader`3.Load(System.String)">
            <summary>
            Reads an input file using the given <paramref name="filename" />
            and converts it into a set of <see cref="T:System.Action`1" />
            instances that can be applied to a target class instance..
            </summary>
            <remarks>This class can only load valid .NET Assemblies.</remarks>
            <param name="filename">The target file to be loaded.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances to apply to a target type.</returns>
        </member>
        <member name="T:LinFu.Reflection.AssemblyTargetLoader`1">
            <summary>
            Represents a loader class that takes <see cref="T:System.Type" />
            instances as input and generates <see cref="T:System.Action`1" />
            instances that can be used to configure a <typeparamref name="TTarget" />
            instance.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.AssemblyTargetLoader`1.#ctor">
            <summary>
            Initializes the class with the default property values.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.BasePluginLoader`2">
            <summary>
            Implements the basic functionality of a plugin loader.
            </summary>
            <typeparam name="TTarget">The target type being configured.</typeparam>
            <typeparam name="TAttribute">The attribute type that will be used to mark a type as a plugin.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.BasePluginLoader`2.CanLoad(System.Type)">
            <summary>
            Determines if the plugin loader can load the <paramref name="inputType" />.
            </summary>
            <param name="inputType">The target type that might contain the target <typeparamref name="TAttribute" /> instance.</param>
            <returns>
                <c>true</c> if the type can be loaded; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.BasePluginLoader`2.Load(System.Type)">
            <summary>
            Generates a set of <see cref="T:System.Action`1" /> instances
            using the given <paramref name="input" />.
            </summary>
            <param name="input">The input that will be used to configure the target.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be <c>null</c>.</returns>
        </member>
        <member name="T:LinFu.Reflection.CollectionExtensions">
            <summary>
            Adds additional support methods to the standard System.Collection classes.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.CollectionExtensions.HasElementWith``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether or not an element exists that matches the given
            <paramref name="predicate" />.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="items">The list of items being searched.</param>
            <param name="predicate">The predicate that will be used to describe the matching items.</param>
            <returns>Returns <c>true</c> if at least one match is found; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.CollectionExtensions.LoadFrom``1(System.Collections.Generic.ICollection{``0},System.String,System.String)">
            <summary>
            Loads a list of types that match the given <typeparamref name="T">target type</typeparamref>.
            </summary>
            <typeparam name="T">The target type to be loaded.</typeparam>
            <param name="list">The list that will hold the instances of the target type.</param>
            <param name="targetDirectory">The directory that will be used to scan for assemblies that contain the target type.</param>
            <param name="filespec">The wildcard pattern that describes the files to be loaded.</param>
        </member>
        <member name="T:LinFu.Reflection.DefaultDirectoryLister">
            <summary>
            A class that lists the contents of a given directory.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.DefaultDirectoryLister.GetFiles(System.String,System.String)">
            <summary>
            Returns a list of files that match the <paramref name="searchPattern" />
            from the given directory <paramref name="path" />.
            </summary>
            <param name="path">The target directory to search.</param>
            <param name="searchPattern">The search string to match against the names of the files in the <paramref name="path" />.</param>
            <returns>The list of files that match the <paramref name="path" /> and <paramref name="searchPattern" /></returns>
        </member>
        <member name="T:LinFu.Reflection.IActionLoader`2">
            <summary>
            Represents a class that can configure
            a target of type <typeparamref name="TTarget" />
            using an input type of <typeparamref name="TInput" />.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
            <typeparam name="TInput">The input that will be used to configure the target.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.IActionLoader`2.Load(`1)">
            <summary>
            Generates a set of <see cref="T:System.Action`1" /> instances
            using the given <paramref name="input" />.
            </summary>
            <param name="input">The input that will be used to configure the target.</param>
            <returns>A set of <see cref="T:System.Action`1" /> instances. This cannot be <c>null</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.IActionLoader`2.CanLoad(`1)">
            <summary>
            Determines if the PluginLoader can load the <paramref name="inputType" />.
            </summary>
            <param name="inputType">The target type that might contain the target <typeparamref name="TAttribute" /> instance.</param>
            <returns>
                <c>true</c> if the type can be loaded; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="T:LinFu.Reflection.IAssemblyLoader`1">
            <summary>
            Represents a class that loads assemblies into memory
            from disk.
            </summary>
            <typeparam name="TAssembly">
            </typeparam>
        </member>
        <member name="M:LinFu.Reflection.IAssemblyLoader`1.Load(System.String)">
            <summary>
            Loads the target assembly into memory.
            </summary>
            <param name="assemblyFile">The full path and filename of the assembly to load.</param>
            <returns>A loaded <see cref="T:System.Reflection.Assembly" /> instance.</returns>
        </member>
        <member name="T:LinFu.Reflection.IAssemblyLoader">
            <summary>
            Represents a class that loads assemblies into memory
            from disk.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.IAssemblyTargetLoader`3">
            <summary>
            Represents a specific <see cref="T:LinFu.Reflection.IActionLoader`2" />
            type that can load configuration information from an assembly
            and apply it to a <typeparamref name="TTarget" /> instance.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
            <typeparam name="TAssembly">The assembly type.</typeparam>
            <typeparam name="TType">The input type.</typeparam>
        </member>
        <member name="P:LinFu.Reflection.IAssemblyTargetLoader`3.AssemblyLoader">
            <summary>
            The <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance that will load
            the target assemblies.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.IAssemblyTargetLoader`3.TypeLoaders">
            <summary>
            The list of ActionLoaders that will be used to
            configure the target.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.IAssemblyTargetLoader`1">
            <summary>
            Represents a specific <see cref="T:LinFu.Reflection.IActionLoader`2" />
            type that can load configuration information from an assembly
            and apply it to a <typeparamref name="TTarget" /> instance.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
        </member>
        <member name="P:LinFu.Reflection.IAssemblyTargetLoader`1.AssemblyLoader">
            <summary>
            The <see cref="T:LinFu.Reflection.IAssemblyLoader" /> instance that will load
            the target assemblies.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.IAssemblyTargetLoader`1.TypeLoaders">
            <summary>
            The list of ActionLoaders that will be used to
            configure the target.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.IDirectoryListing">
            <summary>
            Represents a class that can list the files
            in a given directory.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.IDirectoryListing.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of the files in the specified directory
            that match the specified search pattern.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of the files in the <paramref name="path" />.</param>
            <returns>The list of files that match the <paramref name="path" /> and <paramref name="searchPattern" /></returns>
        </member>
        <member name="T:LinFu.Reflection.IInitialize`1">
            <summary>
            Represents classes that need to be initialized
            every time a particular
            instance creates that type.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.IInitialize`1.Initialize(`0)">
            <summary>
            Initializes the target with the
            particular <typeparamref name="T" /> instance.
            </summary>
            <param name="source">The <typeparamref name="T" /> instance that will hold the target type.</param>
        </member>
        <member name="T:LinFu.Reflection.ILoader`1">
            <summary>
            Represents a generic interface for an abstract loader
            that can read configuration information from disk
            and apply it to a <typeparamref name="TTarget" /> instance.
            </summary>
            <typeparam name="TTarget">The class type being configured.</typeparam>
        </member>
        <member name="P:LinFu.Reflection.ILoader`1.Plugins">
            <summary>
            The list of <see cref="T:LinFu.Reflection.ILoaderPlugin`1" />
            instances that will be used to
            signal the beginning and end of the
            load sequence.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.ILoader`1.FileLoaders">
            <summary>
            The list of <see cref="T:LinFu.Reflection.IActionLoader`2" />
            instances responsible for configuring the <typeparamref name="TTarget" /> instance.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.ILoader`1.DirectoryLister">
            <summary>
            Gets or sets the <see cref="T:LinFu.Reflection.IDirectoryListing" /> instance
            responsible for returning a list of filenames
            to the loader for processing.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.ILoader`1.CustomLoaderActions">
            <summary>
            The custom list of actions that will be
            performed prior to the beginning of a load operation.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.ILoader`1.QueuedActions">
            <summary>
            The list of actions that will execute
            every time a target instance is configured.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.ILoader`1.LoadDirectory(System.String,System.String)">
            <summary>
            Loads the configuration using the files listed in
            the target <paramref name="directory" /> that match
            the given <paramref name="filespec">file pattern</paramref>.
            </summary>
            <param name="directory">The full path of the location to scan.</param>
            <param name="filespec">The wildcard file pattern string to use when specifying the target files.</param>
        </member>
        <member name="M:LinFu.Reflection.ILoader`1.LoadInto(`0)">
            <summary>
            Configures the <paramref name="target" /> instance
            using the configuration currently loaded from disk.
            </summary>
            <param name="target">The <typeparamref name="TTarget" /> instance to be configured.</param>
        </member>
        <member name="M:LinFu.Reflection.ILoader`1.Reset">
            <summary>
            Clears the currently loaded configuration
            and resets the loader back to its defaults.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.ILoaderPlugin`1">
            <summary>
            Represents a component that can monitor
            a target instance as it loads.
            </summary>
            <typeparam name="TTarget">The target instance type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.ILoaderPlugin`1.BeginLoad(`0)">
            <summary>
            Signals the beginning of a load.
            </summary>
            <param name="target">The target being loaded.</param>
        </member>
        <member name="M:LinFu.Reflection.ILoaderPlugin`1.EndLoad(`0)">
            <summary>
            Signals the end of a load.
            </summary>
            <param name="target">The target being loaded.</param>
        </member>
        <member name="T:LinFu.Reflection.ITypeExtractor">
            <summary>
            Represents a type that can extract <see cref="T:System.Type" />
            objects from an <see cref="T:System.Reflection.Assembly" /> instance.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.ITypeExtractor`2">
            <summary>
            Represents a type that can extract <see cref="T:System.Type" />
            objects from an <see cref="T:System.Reflection.Assembly" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.ITypeExtractor`2.GetTypes(`0)">
            <summary>
            Returns a set of types from a given assembly.
            </summary>
            <param name="targetAssembly">The <see cref="T:System.Reflection.Assembly" /> that contains the target types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of types from the target assembly.</returns>
        </member>
        <member name="T:LinFu.Reflection.CollectionLoader`1">
            <summary>
            Represents an action loader that can load collections from types embedded within a given assembly.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.CollectionLoader`1.Load(System.Type)">
            <summary>
            Creates the list of actions that load the target collection into memory.
            </summary>
            <param name="input">The source type.</param>
            <returns>A list of actions that load the target collection into memory.</returns>
        </member>
        <member name="M:LinFu.Reflection.CollectionLoader`1.CanLoad(System.Type)">
            <summary>
            Determines whether or not the given type can be loaded into memory.
            </summary>
            <param name="inputType">The source type.</param>
            <returns>Returns <c>true</c> if the type can be loaded into memory; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="T:LinFu.Reflection.Loader`1">
            <summary>
            Represents a generic loader class that can
            load multiple <see cref="T:System.Action`1" /> delegates from multiple files and
            apply them to a particular <typeparamref name="TTarget" /> instance.
            </summary>
            <typeparam name="TTarget">
            </typeparam>
        </member>
        <member name="M:LinFu.Reflection.Loader`1.#ctor">
            <summary>
            Initializes the target with the default settings.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.Loader`3">
            <summary>
            Represents a generic loader class that can
            load multiple <see cref="T:System.Action`1" /> delegates from multiple files and
            apply them to a particular <typeparamref name="TTarget" /> instance.
            </summary>
            <typeparam name="TTarget">The target type to configure.</typeparam>
            <typeparam name="TAssembly">The assembly type.</typeparam>
            <typeparam name="TType">The target type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.#ctor(LinFu.Reflection.ITypeExtractor{`1,`2},LinFu.Reflection.IAssemblyLoader{`1})">
            <summary>
            Initializes the target with the default settings.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.#ctor(LinFu.Reflection.ITypeExtractor{`1,`2},LinFu.Reflection.IAssemblyLoader{`1},LinFu.Reflection.IActionLoader{LinFu.Reflection.ILoader{`0},`2})">
            <summary>
            Initializes the target with the default settings.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.Loader`3.QueuedActions">
            <summary>
            The list of actions that will execute
            every time a target instance is configured.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.Loader`3.CustomLoaderActions">
            <summary>
            The custom list of actions that will be
            performed prior to the beginning of the first load operation.
            </summary>
            <remarks>
            These actions will be performed only once per reset.
            </remarks>
        </member>
        <member name="P:LinFu.Reflection.Loader`3.Plugins">
            <summary>
            The list of <see cref="T:LinFu.Reflection.ILoaderPlugin`1" />
            instances that will be used to
            signal the beginning and end of the
            load sequence.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.Loader`3.FileLoaders">
            <summary>
            The list of <see cref="T:LinFu.Reflection.IActionLoader`2" />
            instances responsible for configuring the target instance.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.Loader`3.DirectoryLister">
            <summary>
            Gets or sets the <see cref="T:LinFu.Reflection.IDirectoryListing" /> instance
            responsible for returning a list of filenames
            to the loader for processing.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.LoadDirectory(System.String,System.String)">
            <summary>
            Loads the container with the files listed in
            the target <paramref name="directory" /> that match
            the given <paramref name="filespec">file pattern</paramref>.
            </summary>
            <param name="directory">The full path of the location to scan.</param>
            <param name="filespec">The wildcard file pattern string to use when specifying the target files.</param>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.LoadInto(`0)">
            <summary>
            Loads the current configuration into the <paramref name="target" />
            instance.
            </summary>
            <param name="target">
            </param>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.Reset">
            <summary>
            Clears the currently loaded configuration
            and resets the loader back to its defaults.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.AutoLoadFrom(System.String,System.String,`0)">
            <summary>
            Monitors the given <paramref name="directory" /> for any file changes and
            updates the current loader whenever the files that match the given <paramref name="fileSpec" />
            are loaded into memory
            </summary>
            <param name="directory">The full path of the location to scan.</param>
            <param name="fileSpec">The wildcard file pattern string to use when specifying the target files.</param>
            <param name="target">The target that will be loaded using the current loader.</param>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.ShouldLoad(LinFu.Reflection.ILoaderPlugin{`0})">
            <summary>
            Determines whether or not a specific plugin should be loaded.
            </summary>
            <param name="plugin">The target plugin to be loaded.</param>
            <returns>
                <c>true</c> if the plugin should be loaded; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.Loader`3.LoadFile(System.String)">
            <summary>
            Loads the <paramref name="currentFile">current file</paramref>
            using the list of associated <see cref="P:LinFu.Reflection.Loader{`0,`1,`2}.FileLoaders" />.
            </summary>
            <param name="currentFile">The full path and filename being loaded.</param>
        </member>
        <member name="T:LinFu.Reflection.LoaderPluginAttribute">
            <summary>
            Marks a class as a loader plugin type.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.PluginLoader`2">
            <summary>
            Represents a loader class that can load
            <see cref="T:LinFu.Reflection.ILoaderPlugin`1" /> instances
            marked with a particular <typeparamref name="TAttribute" />
            type.
            </summary>
            <typeparam name="TTarget">The target type being configured.</typeparam>
            <typeparam name="TAttribute">The attribute type that marks a type as a plugin type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.PluginLoader`2.CanLoad(System.Type)">
            <summary>
            Determines if the plugin loader can load the <paramref name="inputType" />.
            </summary>
            <remarks>The target type must implement <see cref="T:LinFu.Reflection.ILoaderPlugin`1" /> before it can be loaded.</remarks>
            <param name="inputType">The target type that might contain the target <typeparamref name="TAttribute" /> instance.</param>
            <returns>
                <c>true</c> if the type can be loaded; otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:LinFu.Reflection.PluginLoader`2.Load(System.Type)">
            <summary>
            Loads a set of actions from a <see cref="T:System.Type" />
            instance.
            </summary>
            <param name="input">The target type to scan.</param>
            <returns>A set of actions which will be applied to the target <see cref="T:LinFu.Reflection.ILoader`1" /> instance.</returns>
        </member>
        <member name="T:LinFu.Reflection.Plugins.BaseLoaderPlugin`1">
            <summary>
            A class that implements the basic functionality of
            a loader plugin.
            </summary>
            <typeparam name="TTarget">The type being loaded.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseLoaderPlugin`1.BeginLoad(`0)">
            <summary>
            Signals the beginning of a load.
            </summary>
            <param name="target">The target being loaded.</param>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseLoaderPlugin`1.EndLoad(`0)">
            <summary>
            Signals the end of a load.
            </summary>
            <param name="target">The target being loaded.</param>
        </member>
        <member name="T:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3">
            <summary>
            A plugin class that provides the basic implementation
            for plugins that work with <see cref="T:LinFu.Reflection.IAssemblyTargetLoader`1" /> instances.
            </summary>
            <typeparam name="TTarget">The target type being configured.</typeparam>
            <typeparam name="TAssembly">The assembly type.</typeparam>
            <typeparam name="TType">The input type.</typeparam>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3.#ctor(LinFu.Reflection.ITypeExtractor{`1,`2},LinFu.Reflection.IAssemblyTargetLoader{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3" /> class.
            </summary>
            <param name="typeExtractor">The type extractor that will pull the types out of the current assembly.</param>
            <param name="assemblyLoader">The assembly loader that will load the current assembly into memory.</param>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3.Initialize(LinFu.Reflection.ILoader{`0})">
            <summary>
            Searches the loader for an <see cref="T:LinFu.Reflection.IAssemblyTargetLoader`1" />
            instance and uses its derived classes to initialize
            the assembly target loader.
            </summary>
            <param name="source">The <see cref="T:LinFu.Reflection.ILoader`1" /> instance that will hold the plugin.</param>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3.Initialize(LinFu.Reflection.ILoader{`0},LinFu.Reflection.IAssemblyTargetLoader{`0,`1,`2})">
            <summary>
            Initializes the <paramref name="loader" /> instance
            with the given <paramref name="assemblyLoader" /> instance.
            </summary>
            <param name="loader">The loader being configured.</param>
            <param name="assemblyLoader">The assembly loader that will load the types into the loader itself.</param>
        </member>
        <member name="T:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`1">
            <summary>
            A plugin class that provides the basic implementation
            for plugins that work with <see cref="T:LinFu.Reflection.IAssemblyTargetLoader`1" /> instances.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3" /> class.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`1.#ctor(LinFu.Reflection.ITypeExtractor{System.Reflection.Assembly,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:LinFu.Reflection.Plugins.BaseTargetLoaderPlugin`3" /> class.
            </summary>
            <param name="typeExtractor">The type extractor that will pull the types out of the current assembly.</param>
        </member>
        <member name="T:LinFu.Reflection.Runtime">
            <summary>
            Adds helper methods that return information about the current
            runtime.
            </summary>
        </member>
        <member name="P:LinFu.Reflection.Runtime.IsRunningOnMono">
            <summary>
            Gets a value indicating if the application is
            currently running on the Mono platform.
            </summary>
        </member>
        <member name="T:LinFu.Reflection.TypeExtractor">
            <summary>
            Represents a type that can extract <see cref="T:System.Type" />
            objects from an <see cref="T:System.Reflection.Assembly" /> instance.
            </summary>
        </member>
        <member name="M:LinFu.Reflection.TypeExtractor.GetTypes(System.Reflection.Assembly)">
            <summary>
            Returns a set of types from a given assembly.
            </summary>
            <param name="targetAssembly">The <see cref="T:System.Reflection.Assembly" /> that contains the target types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of types from the target assembly.</returns>
        </member>
    </members>
</doc>
